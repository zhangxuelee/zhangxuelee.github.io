<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端复习大纲</title>
    <link href="/blog/2022/07/15/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/"/>
    <url>/blog/2022/07/15/%E5%89%8D%E7%AB%AF%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="前端复习大纲"><a href="#前端复习大纲" class="headerlink" title="前端复习大纲"></a>前端复习大纲</h1><h2 id="1-Web标准"><a href="#1-Web标准" class="headerlink" title="1. Web标准"></a>1. Web标准</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs plain"><code class="language-hljs plain">web标准主要由结构、表现和行为组成<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><table><thead><tr><th>标准</th><th align="left">说明</th><th align="center">使用</th></tr></thead><tbody><tr><td>结构</td><td align="left">结构用于对<strong>网页元素</strong>进行整理和分类</td><td align="center">HTML</td></tr><tr><td>表现</td><td align="left">表现用于设置网页元素的版本、颜色、大小等<strong>外观样式</strong></td><td align="center">CSS</td></tr><tr><td>行为</td><td align="left">行为指网页模型的定义及<strong>交互</strong>的编写</td><td align="center">JS</td></tr><tr><td>## 2. HTML（结构）</td><td align="left"></td><td align="center"></td></tr></tbody></table><blockquote><p>HTML主要做结构，显示元素内容</p></blockquote><ol><li>标签的的书写注意规范</li><li>HTML标签</li><li>超链接标签</li><li>图片标签、alt和title的区别</li><li>相对路径的三种形式</li><li>能够书写表格</li><li>能够写出无序列表</li><li>能够写出3~4个常用input表单类型</li><li>能够写出下拉列表表单</li><li>能够使用表单元素实现注册页面</li><li>能够独立查阅W3C文档<h2 id="3-CSS（样式）"><a href="#3-CSS（样式）" class="headerlink" title="3. CSS（样式）"></a>3. CSS（样式）</h2><blockquote><p>CSS美化HTML，布局网页</p></blockquote></li><li>CSS概念</li><li>CSS基础选择器</li><li>设置字体样式</li><li>设置文本样式</li><li>CSS的三种引入方式</li><li>使用Chrome调试工具调试样式</li><li>能使用emmet语法</li><li>能够使用CSS复合选择器</li><li>能够写出伪类选择器的使用规范</li><li>能够说出元素有几种显示模式</li><li>能够写出元素显示模式的相互转换代码</li><li>能够写出背景图片的设置方法</li><li>能够计算CSS的权重</li><li>能够准确阐述盒子模型的4个组成部分</li><li>能够利用边框复合写法给元素添加边框</li><li>能够计算盒子的实际大小</li><li>能够利用盒子模型布局模块案例</li><li>能够给盒子设置圆角边框</li><li>能够给盒子添加阴影</li><li>能够给文字添加阴影<h2 id="4-JS"><a href="#4-JS" class="headerlink" title="4. JS"></a>4. JS</h2></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS基础</title>
    <link href="/blog/2022/07/15/CSS%E5%9F%BA%E7%A1%80/"/>
    <url>/blog/2022/07/15/CSS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h2 id="1-CSS简介"><a href="#1-CSS简介" class="headerlink" title="1.CSS简介"></a>1.CSS简介</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><blockquote><p>CSS（层叠样式表）是一种标记语言，用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）及版面的布局和外观显示样式。</p></blockquote><h3 id="1-2-CSS语法规范"><a href="#1-2-CSS语法规范" class="headerlink" title="1.2 CSS语法规范"></a>1.2 CSS语法规范</h3><blockquote><p>选择器 {样式}</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    p {<br>        color: red;<br>        font-size: 12px;<br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    p {<br>        color: red;<br>        font-size: 12px;<br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="2-CSS基础选择器"><a href="#2-CSS基础选择器" class="headerlink" title="2.CSS基础选择器"></a>2.CSS基础选择器</h2><blockquote><p>基础选择器由单个选择器组成，包括标签选择器、类选择器、id选择器和通配符选择器。  </p></blockquote><p><strong>1. 标签选择器：可以选出所有相同的标签</strong></p><blockquote><p>为同类型的标签统一设置样式，谁需要谁调用。<br>   </p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    p {<br>        color: green;<br>    }<br>    div {<br>         color: pink;<br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><br><strong>2. <font color="#0099ff">类选择器：差异化选择不同的标签</font></strong><font color="#0099ff"><br>样式点定义，结构类调用；一个或多个，开发最常用。</font><br>   <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.red</span> {</span><br>        color: red;<br>    }<br><span class="css">    <span class="hljs-selector-class">.star-sing</span> {</span><br>        color: green;<br>    }<br><span class="css">    <span class="hljs-selector-class">.memeda</span> {  </span><br>        color: pink;<br>    }<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red"</span>&gt;</span>冰雨<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red"</span>&gt;</span>来生缘<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>李香兰<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"memeda"</span>&gt;</span>生僻字<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"star-sing"</span>&gt;</span>江南style<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red"</span>&gt;</span>我也想变红色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><br><font color="#0099ff">多类名：同一个div可调用多个class</font><br>   <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-class">.red</span> {</span><br>            color:  red;<br>        }<br><span class="css">        <span class="hljs-selector-class">.font35</span> {</span><br>            font-size: 35px;<br>        }<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red font35"</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><br><strong>3. id选择器</strong><br>HTML元素以id属性来设置id选择器，CSS中id选择器以#来定义。<font color="#0099ff">id只可以被调用一次，class可以被调用多次</font><br>   <figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml">        #nav(id名) </span><span class="xquery">{；</span><br><span class="xquery">            color: red;</span><br><span class="xquery">            ···</span><br><span class="xquery">        }</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"nav"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    p {<br>        color: green;<br>    }<br>    div {<br>         color: pink;<br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><br><strong>2. <font color="#0099ff">类选择器：差异化选择不同的标签</font></strong><font color="#0099ff"><br>样式点定义，结构类调用；一个或多个，开发最常用。</font><br>   <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.red</span> {</span><br>        color: red;<br>    }<br><span class="css">    <span class="hljs-selector-class">.star-sing</span> {</span><br>        color: green;<br>    }<br><span class="css">    <span class="hljs-selector-class">.memeda</span> {  </span><br>        color: pink;<br>    }<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red"</span>&gt;</span>冰雨<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red"</span>&gt;</span>来生缘<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>李香兰<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"memeda"</span>&gt;</span>生僻字<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"star-sing"</span>&gt;</span>江南style<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red"</span>&gt;</span>我也想变红色<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><br><font color="#0099ff">多类名：同一个div可调用多个class</font><br>   <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">        <span class="hljs-selector-class">.red</span> {</span><br>            color:  red;<br>        }<br><span class="css">        <span class="hljs-selector-class">.font35</span> {</span><br>            font-size: 35px;<br>        }<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red font35"</span>&gt;</span>刘德华<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><br><strong>3. id选择器</strong><br>HTML元素以id属性来设置id选择器，CSS中id选择器以#来定义。<font color="#0099ff">id只可以被调用一次，class可以被调用多次</font><br>   <figure class="highlight xquery"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml">        #nav(id名) </span><span class="xquery">{；</span><br><span class="xquery">            color: red;</span><br><span class="xquery">            ···</span><br><span class="xquery">        }</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"nav"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>></span></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><br><strong>4. 通配符选择器</strong><br>通配符选择器使用*定义，表示选取页面中所有（例如HTML、div、li等）元素（标签）<p></p></blockquote><blockquote><p>通配符选择器不需要调用，自动就给所有的元素使用样式<br>   </p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>        color: red;<br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    * {<br>        color: red;<br>    }<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><br><strong>5. id选择器和类选择器的区别</strong><br>类选择器（class）类比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用<p></p></blockquote><blockquote><p>id选择器类比人的身份证号码，全中国是唯一的，不得重复</p></blockquote><h2 id="3-CSS字体属性"><a href="#3-CSS字体属性" class="headerlink" title="3.CSS字体属性"></a>3.CSS字体属性</h2><blockquote><p>CSS Fonts（字体）属性用于定义字体系列、大小、粗细和文字样式（如斜体）  </p></blockquote><p><strong>1. 字体系列</strong></p><blockquote><p>字体之间使用逗号隔开，若是多个单词则需要加引号，可以直接给body定义</p></blockquote><pre><code class="hljs"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    body {<br>        font-family: 'Times New Roman', Times, serif;<br>    }<br>    h2 {<br>        font-family: '微软雅黑';<br>    }<br>    p {<br>        font-family: 'Times New Roman', Times, serif;<br>    }<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>pink的秘密<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>那一抹众人中最漂亮的颜色,<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>优雅,淡然,又那么心中清澈.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>前端总是伴随着困难和犯错,<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>静心,坦然,攻克一个又一个.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>拼死也要克服它,<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是pink的秘密也是老师最终的嘱托.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    body {<br>        font-family: 'Times New Roman', Times, serif;<br>    }<br>    h2 {<br>        font-family: '微软雅黑';<br>    }<br>    p {<br>        font-family: 'Times New Roman', Times, serif;<br>    }<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>pink的秘密<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>那一抹众人中最漂亮的颜色,<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>优雅,淡然,又那么心中清澈.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>前端总是伴随着困难和犯错,<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>静心,坦然,攻克一个又一个.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>拼死也要克服它,<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是pink的秘密也是老师最终的嘱托.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></code></pre><p><strong>2. 字体大小</strong></p><blockquote><p>CSS使用font-size属性定义字体大小，可以直接给body指定整个页面文字的大小<br>    </p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs css"><span class="hljs-selector-tag">p</span> {<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number"><code class="language-hljs css"><span class="hljs-selector-tag">p</span> {<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><br>注：标题标签需要单独指定文字大小<p></p></blockquote><p><strong>3. 字体粗细</strong></p><blockquote><p>CSS使用font-weight属性定义字体粗细</p></blockquote><pre><code class="hljs"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.bold</span> {</span><br>        font-weight: 700;    <br>    }<br>    h2 {<br>        font-weight: 400;   <br>    }<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>pink的秘密<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bold"</span>&gt;</span>拼死也要克服它<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.bold</span> {</span><br>        font-weight: 700;    <br>    }<br>    h2 {<br>        font-weight: 400;   <br>    }<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>pink的秘密<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bold"</span>&gt;</span>拼死也要克服它<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></code></pre><p><strong>4. 字体样式（风格）</strong></p><blockquote><p>CSS使用font-style属性定义字体样式</p></blockquote><pre><code class="hljs"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    p {<br>        font-style: italic;<br>    }<br>    em {<br>        font-style: normal;<br>    }<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>同学,上课时候的你<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>下课时候的你<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></code></pre><p><strong>5. <font color="#0099ff"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    p {<br>        font-style: italic;<br>    }<br>    em {<br>        font-style: normal;<br>    }<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>同学,上课时候的你<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>下课时候的你<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure></code></pre><p><strong>5. <font color="#0099ff">复合属性</font></strong></p><blockquote><p>字体属性可以综合来写，格式顺序不可改变</p></blockquote><blockquote><p>格式：font: font-style  font-weight  font-size/line-height  font-family;</p></blockquote><blockquote><p>font-size和font-family属性必须有，其余属性可以省略</p></blockquote><pre><code class="hljs"><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag"><<span class="hljs-name">head</span>></span><br>    <span class="hljs-tag"><<span class="hljs-name">style</span>></span><br><span class="css">    <span class="hljs-comment">/* 想要div文字变倾斜 加粗 字号设置为16像素 并且 是微软雅黑 */</span></span><br>    div {<br>        /* font-style: italic;<br>        font-weight: 700;<br>        font-size: 16px;<br>        font-family: 'Microsoft yahei'; */<br><span class="css">        <span class="hljs-comment">/* 复合属性: 简写的方式  节约代码 */</span></span><br><span class="css">        <span class="hljs-comment">/* font: font-style  font-weight  font-size/line-height  font-family; */</span></span><br><span class="css">        <span class="hljs-comment">/* font: italic 700 16px 'Microsoft yahei'; */</span></span><br>        font: 20px '黑体';<br>    }<br>    <span class="hljs-tag"></<span class="hljs-name">style</span>></span><br><span class="hljs-tag"></<span class="hljs-name">head</span>></span><br><span class="hljs-tag"><<span class="hljs-name">body</span>></span><br><span class="hljs-tag"><<span class="hljs-name">div</span>></span>三生三世十里桃花,一心一意百行代码<span class="hljs-tag"></<span class="hljs-name">div</span>></span><br><span class="hljs-tag"></<span class="hljs-name">body</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></td></tr></tbody></table></figure></code></pre><p><strong>6. 字体属性总结</strong></p><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>font-size</td><td>字号</td><td>单位是px</td></tr><tr><td>font-family</td><td>字体</td><td>实际工作中按照团队约定书写字体</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>加粗是700或bold，不加粗是400或normal；数字后不跟单位</td></tr><tr><td>font-style</td><td>字体样式</td><td>倾斜是italic，不倾斜是normal；常用normal</td></tr><tr><td>font</td><td>字体连写</td><td>1.字体连写是有顺序的，不能随意换位置 2.其中字号和字体必须同时出现</td></tr></tbody></table><h2 id="4-CSS文本属性"><a href="#4-CSS文本属性" class="headerlink" title="4.CSS文本属性"></a>4.CSS文本属性</h2><blockquote><p>CSS Text（文本）属性可定义文本的<font color="#0099ff">外观</font>，例如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等  </p></blockquote><p><strong>4.1 文本颜色</strong></p><blockquote><p>color属性用于定义文本的颜色<br>    </p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs css"><span class="hljs-selector-tag">div</span> {<br>    <span class="hljs-attribute"><code class="language-hljs css"><span class="hljs-selector-tag">div</span> {<br>    <span class="hljs-attribute">color</span>: red;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p></p></blockquote><p><strong>4.2 对齐文本</strong></p><blockquote><p>text-align属性用于设置元素内文本内容的水平对齐方式</p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs css"><span class="hljs-selector-tag">h1</span> {<br>    <span class="hljs-attribute"><code class="language-hljs css"><span class="hljs-selector-tag">h1</span> {<br>    <span class="hljs-attribute">text-align</span>: center/left/right;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p><strong>4.3 装饰文本</strong></p><blockquote><p>text-decoration属性规定添加到文本的修饰，可以给文本添加下划线、删除线、上划线等</p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs css"><span class="hljs-selector-tag">div</span> {<br><span class="hljs-attribute"><code class="language-hljs css"><span class="hljs-selector-tag">div</span> {<br><span class="hljs-attribute">text-decoration</span>:underline/none;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p><strong>4.4 文本缩进</strong></p><blockquote><p>text-indent属性常用于段落的首行缩进</p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs css"><span class="hljs-selector-tag">p</span> {<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number"><code class="language-hljs css"><span class="hljs-selector-tag">p</span> {<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p><strong>4.5 行间距</strong></p><blockquote><p>text-height属性用于设置行间距（行高），行高=上间距+文本高度+下间距</p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs css"><span class="hljs-selector-tag">p</span> {<br>    <span class="hljs-attribute">text-height</span>: <span class="hljs-number"><code class="language-hljs css"><span class="hljs-selector-tag">p</span> {<br>    <span class="hljs-attribute">text-height</span>: <span class="hljs-number">25px</span>;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p><strong>4.6 文本属性总结</strong><br>|属性|表示|注意点|<br>|–|–|–|<br>|color|文本颜色|通常使用十六进制的简写形式|<br>|text-align|文本对齐|left/center/right|<br>|text-decoration|文本装饰|添加下划线：underline；取消下划线：none|<br>|text-indent|文本缩进|通常text-indent: 2em|<br>|text-height|行高|行高 = 上间距 + 文本高度 + 下间距|</p><h2 id="5-CSS的引入方式"><a href="#5-CSS的引入方式" class="headerlink" title="5.CSS的引入方式"></a>5.CSS的引入方式</h2><ol><li><p>行内样式表（行内式）</p><blockquote><p>行内样式表（内联样式表）是<font color="#0099ff">在元素标签内部的<code>&lt;style&gt;</code>属性中设定CSS样式</font>，适合于修改简单样式</p></blockquote><blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs <style>```其实就是标签的属性，将```style```直接放在```<div>```标签中"><code class="language-hljs <style>```其实就是标签的属性，将```style```直接放在```<div>```标签中"><br>>控制当前标签的样式设置 <br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></blockquote><div style="color: red; font-size: 12px;">青春不常在，抓紧去学习</div><figure class="highlight autohotkey"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs autohotkey"><span class="hljs-number">2</span>. 内部样式表（嵌入式）<br>   &gt;内部样式表（内嵌样式表）是&lt;font color=#<span class="hljs-number"><code class="language-hljs autohotkey"><span class="hljs-number">2</span>. 内部样式表（嵌入式）<br>   &gt;内部样式表（内嵌样式表）是&lt;font color=#<span class="hljs-number">0099</span>ff>写到HTML页面内部，是将所有的CSS代码抽取出来，单独放到一个```<style>```标签中</font><br><br>   >一般将```<style>```标签放在```<head>```标签中<br><br>   >控制当前页面的元素样式设置<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><style>    div {        color: red;        font-size: 12px;    }</style><figure class="highlight autohotkey"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs autohotkey"><span class="hljs-number">3</span>. &lt;font color=#<span class="hljs-number">0099</span>ff&gt;外部样式表（链接式）&lt;/font&gt;<br>   &gt;外部样式表是&lt;font color=#<span class="hljs-number"><code class="language-hljs autohotkey"><span class="hljs-number">3</span>. &lt;font color=#<span class="hljs-number">0099</span>ff&gt;外部样式表（链接式）&lt;/font&gt;<br>   &gt;外部样式表是&lt;font color=#<span class="hljs-number">0099</span>ff>样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用</font><br><br>   >新建后缀为.css的文件，把所有CSS代码放入其中；在HTML页面中，使用```<link>```标签引入这个文件；```<link>```标签放在```<head>```标签中<br><br>   >控制多个页面的元素样式设置<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><link rel="stylesheet" href="css文件路径/style.css"><figure class="highlight angelscript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs angelscript"><br>## <span class="hljs-number">6.</span>CSS的复合选择器<br>&gt;常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器<br><span class="hljs-number">1.</span> &lt;font color=#<span class="hljs-number">0099f</span>f&gt;后代选择器&lt;/font&gt;<br>   <br>   &gt;后代选择器（包含选择器）可以选择父元素里面子元素<br>   <br>   &gt;`元素<span class="hljs-number">1</span> 元素<span class="hljs-number">2</span> {样式声明}`<br><br>   &lt;font color=#<span class="hljs-number">0099</span>&gt;注：上述语法表示选择元素<span class="hljs-number">1</span>里面的所有元素<span class="hljs-number">2</span>（后代元素）&lt;/font&gt;<br><br><span class="hljs-number">2.</span> &lt;font color=#<span class="hljs-number">0099f</span>f&gt;子选择器&lt;/font&gt;<br>   &gt;子元素选择器只能选择作为某元素的最近以及子元素，简单理解就是选亲儿子元素<br><br>   &gt;`元素<span class="hljs-number">1</span> &gt; 元素<span class="hljs-number">2</span> {样式声明}`<br><br>   &lt;font color=#<span class="hljs-number">0099</span>&gt;注：上述语法表示选择元素<span class="hljs-number">1</span>里面的所有直接后代元素<span class="hljs-number">2</span>（子元素）&lt;/font&gt;<br>   <br><span class="hljs-number">3.</span> &lt;font color=#<span class="hljs-number">0099f</span>f&gt;并集选择器&lt;/font&gt;<br>      &gt;并集选择器可以选择多组标签，同时为他们定义相同的样式，常用于集体声明<br><br>   &gt;`元素<span class="hljs-number">1</span> , 元素<span class="hljs-number">2</span> {样式声明}`<br><br>   &lt;font color=#<span class="hljs-number">0099</span>&gt;注：上述语法表示元素<span class="hljs-number">1</span>和元素<span class="hljs-number">2</span>&lt;/font&gt;<br><span class="hljs-number">4.</span> 伪类选择器之&lt;font color=#<span class="hljs-number"><code class="language-hljs angelscript"><br>## <span class="hljs-number">6.</span>CSS的复合选择器<br>&gt;常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器<br><span class="hljs-number">1.</span> &lt;font color=#<span class="hljs-number">0099f</span>f&gt;后代选择器&lt;/font&gt;<br>   <br>   &gt;后代选择器（包含选择器）可以选择父元素里面子元素<br>   <br>   &gt;`元素<span class="hljs-number">1</span> 元素<span class="hljs-number">2</span> {样式声明}`<br><br>   &lt;font color=#<span class="hljs-number">0099</span>&gt;注：上述语法表示选择元素<span class="hljs-number">1</span>里面的所有元素<span class="hljs-number">2</span>（后代元素）&lt;/font&gt;<br><br><span class="hljs-number">2.</span> &lt;font color=#<span class="hljs-number">0099f</span>f&gt;子选择器&lt;/font&gt;<br>   &gt;子元素选择器只能选择作为某元素的最近以及子元素，简单理解就是选亲儿子元素<br><br>   &gt;`元素<span class="hljs-number">1</span> &gt; 元素<span class="hljs-number">2</span> {样式声明}`<br><br>   &lt;font color=#<span class="hljs-number">0099</span>&gt;注：上述语法表示选择元素<span class="hljs-number">1</span>里面的所有直接后代元素<span class="hljs-number">2</span>（子元素）&lt;/font&gt;<br>   <br><span class="hljs-number">3.</span> &lt;font color=#<span class="hljs-number">0099f</span>f&gt;并集选择器&lt;/font&gt;<br>      &gt;并集选择器可以选择多组标签，同时为他们定义相同的样式，常用于集体声明<br><br>   &gt;`元素<span class="hljs-number">1</span> , 元素<span class="hljs-number">2</span> {样式声明}`<br><br>   &lt;font color=#<span class="hljs-number">0099</span>&gt;注：上述语法表示元素<span class="hljs-number">1</span>和元素<span class="hljs-number">2</span>&lt;/font&gt;<br><span class="hljs-number">4.</span> 伪类选择器之&lt;font color=#<span class="hljs-number">0099f</span>f>链接伪类选择器</font><br>   >伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果<br><br>   >`a:link/visited/hover/active`<br>   （顺序不可改变）<br><br>   >a链接需要单独指定样式<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure> a {     color: gray; } a:hover {     color: red; } <figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs gherkin">   |<span class="hljs-string">选项</span>|<span class="hljs-string">解释</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">link</span>|<span class="hljs-string">选择所有未被访问的链接</span>|<br>   |<span class="hljs-string">visited</span>|<span class="hljs-string">选择所有已被访问的链接</span>|<br>   |<span class="hljs-string">hover</span>|<span class="hljs-string">选择鼠标指针位于其上的链接</span>|<br>   |<span class="hljs-string">active</span>|<span class="hljs-string">选择活动链接（鼠标按下未弹起的链接）</span>|<br><br>   <span class="hljs-variable">&lt;font color=#0099&gt;</span>注：上述语法表示元素1和元素2<span class="hljs-variable">&lt;/font&gt;</span><br>5. 伪类选择器之<span class="hljs-variable">&lt;font color=#0099ff&gt;</span>：focus伪类选择器<span class="hljs-variable"><code class="language-hljs gherkin">   |<span class="hljs-string">选项</span>|<span class="hljs-string">解释</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">link</span>|<span class="hljs-string">选择所有未被访问的链接</span>|<br>   |<span class="hljs-string">visited</span>|<span class="hljs-string">选择所有已被访问的链接</span>|<br>   |<span class="hljs-string">hover</span>|<span class="hljs-string">选择鼠标指针位于其上的链接</span>|<br>   |<span class="hljs-string">active</span>|<span class="hljs-string">选择活动链接（鼠标按下未弹起的链接）</span>|<br><br>   <span class="hljs-variable">&lt;font color=#0099&gt;</span>注：上述语法表示元素1和元素2<span class="hljs-variable">&lt;/font&gt;</span><br>5. 伪类选择器之<span class="hljs-variable">&lt;font color=#0099ff&gt;</span>：focus伪类选择器<span class="hljs-variable"></font></span><br>   >：focus伪类选择器用于选取获得焦点的表单元素<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure>input:focus { background-color: yellow;}<figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs gherkin">6. 复合选择器总结<br>   |<span class="hljs-string">选择器</span>|<span class="hljs-string">作用</span>|<span class="hljs-string">特征</span>|<span class="hljs-string">使用情况</span>|<span class="hljs-string">隔开符号及用法</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">后代选择器</span>|<span class="hljs-string">用来选择后代元素</span>|<span class="hljs-string">可以是子孙后代</span>|<span class="hljs-string">较多</span>|<span class="hljs-string">符号是**空格** .nav a</span>|<br>   |<span class="hljs-string">子代选择器</span>|<span class="hljs-string">选择最近一级元素</span>|<span class="hljs-string">只选亲儿子</span>|<span class="hljs-string">较少</span>|<span class="hljs-string">符号是**大于** .nav&gt;p</span>|<br>   |<span class="hljs-string">并集选择器</span>|<span class="hljs-string">选择某些相同样式的元素</span>|<span class="hljs-string">可以用于集体声明</span>|<span class="hljs-string">较多</span>|<span class="hljs-string">符号是**逗号** .nav，.header</span>|<br>   |<span class="hljs-string">链接伪类选择器</span>|<span class="hljs-string">选择不同状态的链接</span>|<span class="hljs-string">跟链接相关</span>|<span class="hljs-string">较多</span>|<span class="hljs-string">符号是**大括号** a{}和a:hover{}</span>|<br>   |<span class="hljs-string">：focus伪类选择器</span>|<span class="hljs-string">选择获得光标的表单</span>|<span class="hljs-string">跟表单相关</span>|<span class="hljs-string">较少</span>|<span class="hljs-string">符号是**冒号** input:focus</span>|<br><span class="hljs-comment">## 8.CSS的元素显示模式</span><br><br>&gt;元素显示模式就是元素（标签）以什么方式进行显示<br><br>1. 元素显示模式分类<br>   <br>   &gt;HTML分为块元素、行内元素和行内块元素<br><br>    |<span class="hljs-string">元素模式</span>|<span class="hljs-string">元素排列</span>|<span class="hljs-string">设置样式</span>|<span class="hljs-string">默认宽度</span>|<span class="hljs-string">包含</span>|<span class="hljs-string">注意</span>|<br>    |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>    |<span class="hljs-string">块级元素</span>|<span class="hljs-string">一行只能放一个块级元素</span>|<span class="hljs-string">可以设置宽度高度</span>|<span class="hljs-string">容器的100%</span>|<span class="hljs-string">容器级可以包含任何标签</span>|<span class="hljs-string">文字类的元素内不能放块级元素</span><br><span class="hljs-string">    </span>|<span class="hljs-string">行内元素</span>|<span class="hljs-string">一行可以放多个行内元素</span>|<span class="hljs-string">不可以直接设置宽度高度</span>|<span class="hljs-string">它本身内容的宽度</span>|<span class="hljs-string">容纳文本或者其他行内元素，不可放块元素</span>|<span class="hljs-string">链接内可以放块元素</span>|<br>    |<span class="hljs-string">行内块元素</span>|<span class="hljs-string">一行放多个行内块元素</span>|<span class="hljs-string">可以设置宽度高度</span>|<span class="hljs-string">它本身内容的宽度</span>|||<br>2. 元素显示模式转换<br>   &gt;一个模式的元素需要另外一种模式的特性<br><br>   &gt;转换为块元素`display:block;`  <br>    转换为行内元素`display:inline;`  <br>    转换为行内块元素`display:inline-block;`  <br>    注：单行文字垂直居中（CSS没有提供代码）`line-height`：让文字的行高等于盒子的高度<br><br><span class="hljs-comment">## 9.CSS的背景</span><br>&gt;背景属性可以设置背景颜色、背景图片、背景平铺、背景图像固定、背景图片位置等<br>1. 基础写法<br>    |<span class="hljs-string">作用</span>|<span class="hljs-string">属性</span>|<span class="hljs-string">值</span>|<br>    |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>    |<span class="hljs-string">背景颜色</span>|<span class="hljs-string"> background-color</span>|<span class="hljs-string">十六进制数/透明（transparent）</span><br><span class="hljs-string">    </span>|<span class="hljs-string">背景图片</span>|<span class="hljs-string"> background-image</span>|<span class="hljs-string">url(图片路径)</span>|<br>    |<span class="hljs-string">背景平铺</span>|<span class="hljs-string"> background-repeat</span>|<span class="hljs-string">no-repeat/repeat/repeat-x/repeat-y</span>|<br>    |<span class="hljs-string">背景图像固定</span>|<span class="hljs-string"> background-attachment</span>|<span class="hljs-string">fixed/scroll</span>|<br>    |<span class="hljs-string">背景图片位置</span>|<span class="hljs-string"> background-position</span>|<span class="hljs-string">center 20px</span>|<br>2. 复合写法  <br>    `background: transparent url(image.jpg) repeat-y fixed top;  `<br>3. 背景颜色半透明  <br>    `background: rgba(0, 0, 0, .3);`<br><br><span class="hljs-comment">## 10.CSS的三大特性</span><br>&gt;CSS的三个特性：层叠性、继承性、优先级<br>1. 层叠性<br>   &gt;代码是逐条执行，若有冲突则会覆盖之前样式<br>2. 继承性  <br>   &gt;行高1.5这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高  <br>   <br>   继承时行高是当前元素的文字大小的1.5倍   <br><br>   `font:12px/1.5 Microsoft YaHei`<br>3. 优先级<br>   &gt;复合选择器的权重会叠加，但权重叠加不进位<br><br>   |<span class="hljs-string">选择器</span>|<span class="hljs-string">选择器权重</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">继承 或者 *</span>|<span class="hljs-string">0，0，0，0</span>|<br>   |<span class="hljs-string">元素选择器</span>|<span class="hljs-string">0，0，0，1</span>|<br>   |<span class="hljs-string">类选择器，伪类选择器</span>|<span class="hljs-string">0，0，1，0</span>|<br>   |<span class="hljs-string">ID选择器</span>|<span class="hljs-string">0，1，0，0</span>|<br>   |<span class="hljs-string">行内样式 style=""</span>|<span class="hljs-string">1，0，0，0</span>|<br>   |<span class="hljs-string">!important 重要的</span>|<span class="hljs-string">∞ 无穷大</span>|<br>   <br><br><span class="hljs-comment">## 11.CSS 盒子模型</span><br>   &gt;页面布局三大核心：盒子模型、浮动、定位  <br>   盒子模型组成：border边框、content内容、padding内边距、margin外边距<br>1. 边框（border） <br>   &gt;CSS边框属性允许你指定一个元素边框的样式和颜色  <br><br>   语法： <br>   `border: border-width ||<span class="hljs-string"> border-style </span>||<span class="hljs-string"> border-color`  </span><br><span class="hljs-string">   简写：</span><br><span class="hljs-string">   `border: 1px solid/dashed/dotted red;  没有顺序`  </span><br><span class="hljs-string">   边框分开写法：`border-top: 1px dashed pink;`</span><br><span class="hljs-string">   </span>|<span class="hljs-string">样式</span>|<span class="hljs-string">属性</span>|<span class="hljs-string">值</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">边框宽度</span>|<span class="hljs-string">border-width</span>|<span class="hljs-string">1px</span>|<br>   |<span class="hljs-string">边框样式</span>|<span class="hljs-string">border-style</span>|<span class="hljs-string">solid/dashed/dotted</span>|<br>   |<span class="hljs-string">边框颜色</span>|<span class="hljs-string">border-color</span>|<span class="hljs-string">pink</span>|<br>   |<span class="hljs-string">边框合并</span>|<span class="hljs-string">border-collapse</span>|<span class="hljs-string">collapse</span>|<br>2. 内边距（padding） <br>   &gt;CSS内边距属性可以有一到四个值（顺时针） <br><br>   &gt;padding会撑开盒子大小，所以去掉盒子本身的的width/height属性 <br><br>   语法： <br>   `padding-top ||<span class="hljs-string"> padding-bottom </span>||<span class="hljs-string"> padding-left </span>||<span class="hljs-string"> padding-right`  </span><br><span class="hljs-string">   简写：</span><br><span class="hljs-string">   `padding: 1px 5px 10px 20px;`  </span><br><br><span class="hljs-string">   </span>|<span class="hljs-string">值的个数</span>|<span class="hljs-string">表达意思</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">padding: 5px;</span>|<span class="hljs-string">代表上下左右都有5px内边距</span>|<br>   |<span class="hljs-string">padding: 5px 10px;</span>|<span class="hljs-string">代表上下内边距5px，左右内边距是10px</span>|<br>   |<span class="hljs-string">padding: 5px 10px 20px;</span>|<span class="hljs-string">代表上内边距5px，左右内边距是10px，下内边距20px</span>|<br>   |<span class="hljs-string">padding: 5px 10px 20px 30px;</span>|<span class="hljs-string">代表上内边距5px，右内边距是10px，下内边距20px，左内边距是30px</span>|<br>3. 外边距（margin）  <br>   3.1 基础   <br>   &gt;margin属性用于设置外边距，即控制盒子和盒子之间的距离<br><br>   语法： <br>   `margin-top ||<span class="hljs-string"> margin-bottom </span>||<span class="hljs-string"> margin-left </span>||<span class="hljs-string"> margin-right`  </span><br><span class="hljs-string">   简写：</span><br><span class="hljs-string">   `margin: 1px 5px 10px 20px;`  </span><br><br><span class="hljs-string">   </span>|<span class="hljs-string">值的个数</span>|<span class="hljs-string">表达意思</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">margin: 5px;</span>|<span class="hljs-string">代表上下左右都有5px外边距</span>|<br>   |<span class="hljs-string">margin: 5px 10px;</span>|<span class="hljs-string">代表上下外边距5px，左右外边距是10px</span>|<br>   |<span class="hljs-string">margin: 5px 10px 20px;</span>|<span class="hljs-string">代表上外边距5px，左右外边距是10px，下外边距20px</span>|<br>   |<span class="hljs-string">margin: 5px 10px 20px 30px;</span>|<span class="hljs-string">代表上外边距5px，右外边距是10px，下外边距20px，左外边距是30px</span>|<br>    3.2 块级盒子水平居中<br>   &gt;外边距可以让块级盒子<span class="hljs-variable">&lt;font color=#0099ff&gt;</span>水平居中<span class="hljs-variable"><code class="language-hljs gherkin">6. 复合选择器总结<br>   |<span class="hljs-string">选择器</span>|<span class="hljs-string">作用</span>|<span class="hljs-string">特征</span>|<span class="hljs-string">使用情况</span>|<span class="hljs-string">隔开符号及用法</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">后代选择器</span>|<span class="hljs-string">用来选择后代元素</span>|<span class="hljs-string">可以是子孙后代</span>|<span class="hljs-string">较多</span>|<span class="hljs-string">符号是**空格** .nav a</span>|<br>   |<span class="hljs-string">子代选择器</span>|<span class="hljs-string">选择最近一级元素</span>|<span class="hljs-string">只选亲儿子</span>|<span class="hljs-string">较少</span>|<span class="hljs-string">符号是**大于** .nav&gt;p</span>|<br>   |<span class="hljs-string">并集选择器</span>|<span class="hljs-string">选择某些相同样式的元素</span>|<span class="hljs-string">可以用于集体声明</span>|<span class="hljs-string">较多</span>|<span class="hljs-string">符号是**逗号** .nav，.header</span>|<br>   |<span class="hljs-string">链接伪类选择器</span>|<span class="hljs-string">选择不同状态的链接</span>|<span class="hljs-string">跟链接相关</span>|<span class="hljs-string">较多</span>|<span class="hljs-string">符号是**大括号** a{}和a:hover{}</span>|<br>   |<span class="hljs-string">：focus伪类选择器</span>|<span class="hljs-string">选择获得光标的表单</span>|<span class="hljs-string">跟表单相关</span>|<span class="hljs-string">较少</span>|<span class="hljs-string">符号是**冒号** input:focus</span>|<br><span class="hljs-comment">## 8.CSS的元素显示模式</span><br><br>&gt;元素显示模式就是元素（标签）以什么方式进行显示<br><br>1. 元素显示模式分类<br>   <br>   &gt;HTML分为块元素、行内元素和行内块元素<br><br>    |<span class="hljs-string">元素模式</span>|<span class="hljs-string">元素排列</span>|<span class="hljs-string">设置样式</span>|<span class="hljs-string">默认宽度</span>|<span class="hljs-string">包含</span>|<span class="hljs-string">注意</span>|<br>    |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>    |<span class="hljs-string">块级元素</span>|<span class="hljs-string">一行只能放一个块级元素</span>|<span class="hljs-string">可以设置宽度高度</span>|<span class="hljs-string">容器的100%</span>|<span class="hljs-string">容器级可以包含任何标签</span>|<span class="hljs-string">文字类的元素内不能放块级元素</span><br><span class="hljs-string">    </span>|<span class="hljs-string">行内元素</span>|<span class="hljs-string">一行可以放多个行内元素</span>|<span class="hljs-string">不可以直接设置宽度高度</span>|<span class="hljs-string">它本身内容的宽度</span>|<span class="hljs-string">容纳文本或者其他行内元素，不可放块元素</span>|<span class="hljs-string">链接内可以放块元素</span>|<br>    |<span class="hljs-string">行内块元素</span>|<span class="hljs-string">一行放多个行内块元素</span>|<span class="hljs-string">可以设置宽度高度</span>|<span class="hljs-string">它本身内容的宽度</span>|||<br>2. 元素显示模式转换<br>   &gt;一个模式的元素需要另外一种模式的特性<br><br>   &gt;转换为块元素`display:block;`  <br>    转换为行内元素`display:inline;`  <br>    转换为行内块元素`display:inline-block;`  <br>    注：单行文字垂直居中（CSS没有提供代码）`line-height`：让文字的行高等于盒子的高度<br><br><span class="hljs-comment">## 9.CSS的背景</span><br>&gt;背景属性可以设置背景颜色、背景图片、背景平铺、背景图像固定、背景图片位置等<br>1. 基础写法<br>    |<span class="hljs-string">作用</span>|<span class="hljs-string">属性</span>|<span class="hljs-string">值</span>|<br>    |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>    |<span class="hljs-string">背景颜色</span>|<span class="hljs-string"> background-color</span>|<span class="hljs-string">十六进制数/透明（transparent）</span><br><span class="hljs-string">    </span>|<span class="hljs-string">背景图片</span>|<span class="hljs-string"> background-image</span>|<span class="hljs-string">url(图片路径)</span>|<br>    |<span class="hljs-string">背景平铺</span>|<span class="hljs-string"> background-repeat</span>|<span class="hljs-string">no-repeat/repeat/repeat-x/repeat-y</span>|<br>    |<span class="hljs-string">背景图像固定</span>|<span class="hljs-string"> background-attachment</span>|<span class="hljs-string">fixed/scroll</span>|<br>    |<span class="hljs-string">背景图片位置</span>|<span class="hljs-string"> background-position</span>|<span class="hljs-string">center 20px</span>|<br>2. 复合写法  <br>    `background: transparent url(image.jpg) repeat-y fixed top;  `<br>3. 背景颜色半透明  <br>    `background: rgba(0, 0, 0, .3);`<br><br><span class="hljs-comment">## 10.CSS的三大特性</span><br>&gt;CSS的三个特性：层叠性、继承性、优先级<br>1. 层叠性<br>   &gt;代码是逐条执行，若有冲突则会覆盖之前样式<br>2. 继承性  <br>   &gt;行高1.5这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高  <br>   <br>   继承时行高是当前元素的文字大小的1.5倍   <br><br>   `font:12px/1.5 Microsoft YaHei`<br>3. 优先级<br>   &gt;复合选择器的权重会叠加，但权重叠加不进位<br><br>   |<span class="hljs-string">选择器</span>|<span class="hljs-string">选择器权重</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">继承 或者 *</span>|<span class="hljs-string">0，0，0，0</span>|<br>   |<span class="hljs-string">元素选择器</span>|<span class="hljs-string">0，0，0，1</span>|<br>   |<span class="hljs-string">类选择器，伪类选择器</span>|<span class="hljs-string">0，0，1，0</span>|<br>   |<span class="hljs-string">ID选择器</span>|<span class="hljs-string">0，1，0，0</span>|<br>   |<span class="hljs-string">行内样式 style=""</span>|<span class="hljs-string">1，0，0，0</span>|<br>   |<span class="hljs-string">!important 重要的</span>|<span class="hljs-string">∞ 无穷大</span>|<br>   <br><br><span class="hljs-comment">## 11.CSS 盒子模型</span><br>   &gt;页面布局三大核心：盒子模型、浮动、定位  <br>   盒子模型组成：border边框、content内容、padding内边距、margin外边距<br>1. 边框（border） <br>   &gt;CSS边框属性允许你指定一个元素边框的样式和颜色  <br><br>   语法： <br>   `border: border-width ||<span class="hljs-string"> border-style </span>||<span class="hljs-string"> border-color`  </span><br><span class="hljs-string">   简写：</span><br><span class="hljs-string">   `border: 1px solid/dashed/dotted red;  没有顺序`  </span><br><span class="hljs-string">   边框分开写法：`border-top: 1px dashed pink;`</span><br><span class="hljs-string">   </span>|<span class="hljs-string">样式</span>|<span class="hljs-string">属性</span>|<span class="hljs-string">值</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">边框宽度</span>|<span class="hljs-string">border-width</span>|<span class="hljs-string">1px</span>|<br>   |<span class="hljs-string">边框样式</span>|<span class="hljs-string">border-style</span>|<span class="hljs-string">solid/dashed/dotted</span>|<br>   |<span class="hljs-string">边框颜色</span>|<span class="hljs-string">border-color</span>|<span class="hljs-string">pink</span>|<br>   |<span class="hljs-string">边框合并</span>|<span class="hljs-string">border-collapse</span>|<span class="hljs-string">collapse</span>|<br>2. 内边距（padding） <br>   &gt;CSS内边距属性可以有一到四个值（顺时针） <br><br>   &gt;padding会撑开盒子大小，所以去掉盒子本身的的width/height属性 <br><br>   语法： <br>   `padding-top ||<span class="hljs-string"> padding-bottom </span>||<span class="hljs-string"> padding-left </span>||<span class="hljs-string"> padding-right`  </span><br><span class="hljs-string">   简写：</span><br><span class="hljs-string">   `padding: 1px 5px 10px 20px;`  </span><br><br><span class="hljs-string">   </span>|<span class="hljs-string">值的个数</span>|<span class="hljs-string">表达意思</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">padding: 5px;</span>|<span class="hljs-string">代表上下左右都有5px内边距</span>|<br>   |<span class="hljs-string">padding: 5px 10px;</span>|<span class="hljs-string">代表上下内边距5px，左右内边距是10px</span>|<br>   |<span class="hljs-string">padding: 5px 10px 20px;</span>|<span class="hljs-string">代表上内边距5px，左右内边距是10px，下内边距20px</span>|<br>   |<span class="hljs-string">padding: 5px 10px 20px 30px;</span>|<span class="hljs-string">代表上内边距5px，右内边距是10px，下内边距20px，左内边距是30px</span>|<br>3. 外边距（margin）  <br>   3.1 基础   <br>   &gt;margin属性用于设置外边距，即控制盒子和盒子之间的距离<br><br>   语法： <br>   `margin-top ||<span class="hljs-string"> margin-bottom </span>||<span class="hljs-string"> margin-left </span>||<span class="hljs-string"> margin-right`  </span><br><span class="hljs-string">   简写：</span><br><span class="hljs-string">   `margin: 1px 5px 10px 20px;`  </span><br><br><span class="hljs-string">   </span>|<span class="hljs-string">值的个数</span>|<span class="hljs-string">表达意思</span>|<br>   |<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>   |<span class="hljs-string">margin: 5px;</span>|<span class="hljs-string">代表上下左右都有5px外边距</span>|<br>   |<span class="hljs-string">margin: 5px 10px;</span>|<span class="hljs-string">代表上下外边距5px，左右外边距是10px</span>|<br>   |<span class="hljs-string">margin: 5px 10px 20px;</span>|<span class="hljs-string">代表上外边距5px，左右外边距是10px，下外边距20px</span>|<br>   |<span class="hljs-string">margin: 5px 10px 20px 30px;</span>|<span class="hljs-string">代表上外边距5px，右外边距是10px，下外边距20px，左外边距是30px</span>|<br>    3.2 块级盒子水平居中<br>   &gt;外边距可以让块级盒子<span class="hljs-variable">&lt;font color=#0099ff&gt;</span>水平居中<span class="hljs-variable"></font></span>，但必须满足两个条件  <br>   - 盒子必须指定了宽度（width）<br>   - 盒子左右的外边距都设置为auto<br><br>   语法：`.header {width:960px; margin:0 auto}`<br>   >以上方法是让块级元素水平居中  <br>   行内元素或行内块元素水平居中：给其父元素添加以下代码  <br><br>   语法：`text-aling: center`<br><br>   3.3 外边距合并<br>   >使用margin定义块元素的垂直外边距（上下外边距）时，可能会出现外边距的合并<br>   1. 相邻块元素垂直外边距的合并（取两个值中的较大者）  <br>   <br>      解决方案：尽量只给一个盒子添加margin值<br>   1. 嵌套块元素垂直外边距的塌陷（取两个值中的较大者） ：  <br>   <br>       解决方案：<br>      - 1.可以给父元素定义上边框（恩断义绝border框）<br>      - 2.可以给父元素定义上内边框（恩断义绝padding框）<br>      - 3.可以给父元素添加overflow: hidden<br>4. 清除内外边距<br>   >网页元素很多都带有默认的内外边距，不同的浏览器默认的内外边距不同；因此在布局前需要清除网页元素的内外边距<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure>* { padding: 0;  /*清除内边距*/ margin: 0;  /*清除外边距*/}```<font color="#0099">注：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距，但是转换成块级和行内块元素就可以了</font></li><li></li><li><p>圆角边框</p></li><li><p>盒子阴影</p></li><li><p>文字阴影</p><h2 id="12-Emmet语法"><a href="#12-Emmet语法" class="headerlink" title="12.Emmet语法"></a>12.Emmet语法</h2><blockquote><p>设置中输入Emmet，勾选Trigger Expansion on tab</p></blockquote></li><li><p>快速生成HTML样式语法</p><table><thead><tr><th>类型</th><th>快捷语法</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>多个相同</td><td>*</td><td>div*3</td><td>生成3个div</td></tr><tr><td>父子级</td><td>&gt;</td><td>ul&gt;li</td><td><code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></td></tr><tr><td>兄弟级</td><td>+</td><td>div+p</td><td><code>&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</code></td></tr><tr><td>生成带有类名或id名</td><td>.或#</td><td>.demo</td><td><code>&lt;div class="demo"&gt;&lt;/div&gt;</code></td></tr><tr><td>生成带有类名或id名</td><td>.或#</td><td>p.demo</td><td><code>&lt;p class="demo"&gt;&lt;/p&gt;</code></td></tr><tr><td>复合</td><td>不要添加空格</td><td>ul&gt;li#two</td><td><code>&lt;ul&gt;&lt;li id="two"&gt;&lt;/li&gt;&lt;/ul&gt;</code></td></tr><tr><td>生成的div类名有顺序</td><td>$</td><td>.demo$*3</td><td><code>&lt;div class="demo1"&gt;&lt;/div&gt;&lt;div class="demo2"&gt;&lt;/div&gt;&lt;div class="demo3"&gt;&lt;/div&gt;</code></td></tr><tr><td>标签内显示文字</td><td>{}</td><td>div{hahaha}</td><td><code>&lt;div&gt;hahaha&lt;/div&gt;</code></td></tr><tr><td>多个标签内显示文字</td><td>{}*</td><td>div{hahaha}*3</td><td><code>&lt;div&gt;hahaha&lt;/div&gt;&lt;div&gt;hahaha&lt;/div&gt;&lt;div&gt;hahaha&lt;/div&gt;</code></td></tr><tr><td>标签内显示有顺序文字</td><td>{$}</td><td>div{$}*3</td><td><code>&lt;div&gt;1&lt;/div&gt;&lt;div&gt;2&lt;/div&gt;&lt;div&gt;3&lt;/div&gt;</code></td></tr></tbody></table></li><li><p>快速生成CSS样式语法</p><table><thead><tr><th>快捷语法</th><th>结果</th></tr></thead><tbody><tr><td>tac</td><td>text-align: center;</td></tr><tr><td>w100</td><td>width: 100px;</td></tr></tbody></table></li><li><p>格式化代码</p><blockquote><p>shift+alt+F</p></blockquote><blockquote><p>设置中搜索format on save</p></blockquote><h2 id="13-Chrome调试工具"><a href="#13-Chrome调试工具" class="headerlink" title="13.Chrome调试工具"></a>13.Chrome调试工具</h2><blockquote><p>F12打开调试工具  </p></blockquote></li></ol><ul><li>左边是HTML元素结构，右边是CSS样式  </li><li>点击元素发现左侧有class但右侧没有样式引入，极有可能是类名或样式引入错误  </li><li>如果有样式，但样式前有黄色感叹号提示，则是样式属性书写错误<h2 id="14-PS-基本操作"><a href="#14-PS-基本操作" class="headerlink" title="14.PS 基本操作"></a>14.PS 基本操作</h2><blockquote></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML基础</title>
    <link href="/blog/2022/06/18/HTML%E5%9F%BA%E7%A1%80/"/>
    <url>/blog/2022/06/18/HTML%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="1-HTML语法规范"><a href="#1-HTML语法规范" class="headerlink" title="1.HTML语法规范"></a>1.HTML语法规范</h2><h2 id="2-HTML基本结构标签"><a href="#2-HTML基本结构标签" class="headerlink" title="2.HTML基本结构标签"></a>2.HTML基本结构标签</h2><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs apache"><span class="hljs-section">&lt;html&gt;</span> <br>  <span class="hljs-section">&lt;head&gt;</span><span class="hljs-section">&lt;/head&gt;</span><br>  <span class="hljs-section">&lt;body&gt;</span><span class="hljs-section">&lt;/body&gt;</span><br><span class="hljs-section"><code class="language-hljs apache"><span class="hljs-section">&lt;html&gt;</span> <br>  <span class="hljs-section">&lt;head&gt;</span><span class="hljs-section">&lt;/head&gt;</span><br>  <span class="hljs-section">&lt;body&gt;</span><span class="hljs-section">&lt;/body&gt;</span><br><span class="hljs-section"></html></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="3-开发工具"><a href="#3-开发工具" class="headerlink" title="3.开发工具"></a>3.开发工具</h2><h2 id="4-HTML常用标签"><a href="#4-HTML常用标签" class="headerlink" title="4.HTML常用标签"></a>4.HTML常用标签</h2><h3 id="4-1-标题标签"><a href="#4-1-标题标签" class="headerlink" title="4.1 标题标签"></a>4.1 标题标签</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>到<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>到<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="4-2-段落标签和换行标签"><a href="#4-2-段落标签和换行标签" class="headerlink" title="4.2 段落标签和换行标签"></a>4.2 段落标签和换行标签</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   我是换行标签<span class="hljs-tag">&lt;<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   我是换行标签<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="4-3-文本格式化标签"><a href="#4-3-文本格式化标签" class="headerlink" title="4.3 文本格式化标签"></a>4.3 文本格式化标签</h3><table><thead><tr><th>语义</th><th align="left">标签</th><th align="left">说明</th></tr></thead><tbody><tr><td>加粗</td><td align="left"><code>&lt;strong&gt;&lt;/strong&gt;</code>或<code>&lt;b&gt;&lt;/b&gt;</code></td><td align="left">推荐使用<code>&lt;strong&gt;</code>标签，语义更强烈</td></tr><tr><td>倾斜</td><td align="left"><code>&lt;em&gt;&lt;/em&gt;</code>或者<code>&lt;i&gt;&lt;/i&gt;</code></td><td align="left">推荐使用<code>&lt;em&gt;</code>标签，语义更强烈</td></tr><tr><td>下划线</td><td align="left"><code>&lt;ins&gt;&lt;/ins&gt;</code>或者<code>&lt;u&gt;&lt;/u&gt;</code></td><td align="left">推荐使用<code>&lt;ins&gt;</code>标签，语义更强烈</td></tr><tr><td>删除线</td><td align="left"><code>&lt;del&gt;&lt;/del&gt;</code>或者<code>&lt;s&gt;&lt;/s&gt;</code></td><td align="left">推荐使用<code>&lt;del&gt;</code>标签，语义更强烈</td></tr><tr><td>### 4.4 div和span标签(都无语义，仅用作布局)</td><td align="left"></td><td align="left"></td></tr><tr><td><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div是大盒子，一行只能放一个<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span是小盒子，一行可以有多个<span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div是大盒子，一行只能放一个<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span是小盒子，一行可以有多个<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></td><td align="left"></td><td align="left"></td></tr><tr><td>### <font color="#0099ff"> 4.5 图像标签和路径</font></td><td align="left"></td><td align="left"></td></tr><tr><td><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string"><code class="language-hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">""</span>/><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></td><td align="left"></td><td align="left"></td></tr><tr><td>属性</td><td align="left">属性值</td><td align="left">说明</td></tr><tr><td>—-</td><td align="left">:—-</td><td align="left">:—-</td></tr><tr><td>src</td><td align="left">图片路径</td><td align="left">必须属性</td></tr><tr><td>alt</td><td align="left">文本</td><td align="left">替换文本。图像不能显示的文字</td></tr><tr><td>title</td><td align="left">文本</td><td align="left">提示文本。鼠标放到图像上，显示的文字</td></tr><tr><td>width</td><td align="left">像素</td><td align="left">设置图像的宽度</td></tr><tr><td>height</td><td align="left">像素</td><td align="left">设置图像的高度</td></tr><tr><td>border</td><td align="left">像素</td><td align="left">设置图像的边框粗细</td></tr><tr><td>注：width和height只需设置一个，另一个会等比例放大缩小</td><td align="left"></td><td align="left"></td></tr><tr><td>+ 相对路径</td><td align="left"></td><td align="left"></td></tr></tbody></table><blockquote><p>相对路径：以引用文件所在位置为参考基础，而建立出的目录路径（图片相对于HTML页面的位置）</p></blockquote><pre><code class="hljs">|相对路径分类|符号|说明||----|:----|:----||同一级路径||图像文件位于HTML文件同一级 如```&lt;img src="haha.jpg" /&gt;```||下一级路径|/|图像文件位于HTML文件下一级 如```&lt;img src="images/haha.jpg" /&gt;```||上一级路径|../|图像文件位于HTML文件上一级 如```&lt;img src="../../haha.jpg" /&gt;```|</code></pre><ul><li>绝对路径<blockquote><p>绝对路径：指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"C:\Users\L\Pictures\haha.jpg"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"C:\Users\L\Pictures\haha.jpg"</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://www.r2coding.com/r2_static/img/haha.png"</span> /></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="4-6-超链接标签"><a href="#4-6-超链接标签" class="headerlink" title=" 4.6 超链接标签"></a><font color="#0099ff"> 4.6 超链接标签</font></h3><ol><li>外部链接  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://zhangxuelee.github.io/"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">_self</span>&gt;</span>个人网站<span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://zhangxuelee.github.io/"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">_self</span>&gt;</span>个人网站<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><table><thead><tr><th align="left">属性</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">href</td><td align="left">用于指定链接目标的url地址，（必须属性）</td></tr><tr><td align="left">target</td><td align="left">用于指定链接页面的打开方式，其中_self为默认值，_blank为在新窗口中打开方式</td></tr></tbody></table></li><li>内部链接<blockquote><p>内部链接：网站内部页面之间的相互链接，直接链接内部页面名称即可</p> <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"index.html"</span> &gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"index.html"</span> &gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></blockquote></li><li>空链接<blockquote><p>空链接：如果当时没有确定链接目标时使用</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> &gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> &gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></blockquote></li><li>下载链接<blockquote><p>下载链接：如果href里面地址是一个文件或者压缩包，会下载这个文件</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"favicon.zip"</span> &gt;</span>下载文件<span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"favicon.zip"</span> &gt;</span>下载文件<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></blockquote></li><li>网页元素链接<blockquote><p>网页元素链接：在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://zhangxuelee.github.io/"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"favicon.png"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://zhangxuelee.github.io/"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"favicon.png"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></blockquote></li><li>锚点链接<blockquote><p>锚点链接：点击链接可快速定位到页面中指定位置。<br>  设置href属性值为”#名字”，在目标位置标签中添加id属性，赋值为刚才的名字</p>  <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#live"</span> /&gt;</span>个人生活<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"live"</span>&gt;</span>个人生活<span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#live"</span> /&gt;</span>个人生活<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"live"</span>&gt;</span>个人生活<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></blockquote><h3 id="4-7-表格标签"><a href="#4-7-表格标签" class="headerlink" title="4.7 表格标签"></a>4.7 表格标签</h3><blockquote><p>表格用于展示数据</p></blockquote><h4 id="1-表格的相关标签"><a href="#1-表格的相关标签" class="headerlink" title="1.表格的相关标签:"></a>1.表格的相关标签:</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>标签用于定义行<br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>标签用于定义单元格<br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>标签用于表示HTML表格的表头部分<br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>标签是表格的头部区域<br><span class="hljs-tag">&lt;<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>标签用于定义行<br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>标签用于定义单元格<br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>标签用于表示HTML表格的表头部分<br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>标签是表格的头部区域<br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>></span>标签是表格的主体区域<br>注：表头单元格里面的文本内容会加粗居中显示<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h4 id="2-表格的书写格式"><a href="#2-表格的书写格式" class="headerlink" title="2.表格的书写格式:"></a>2.表格的书写格式:</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">"center"</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h4 id="3-表格的相关属性"><a href="#3-表格的相关属性" class="headerlink" title="3.表格的相关属性:"></a>3.表格的相关属性:</h4><table><thead><tr><th align="left">属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td align="left">align</td><td>left、center、right</td><td>规定表格相对周围元素的对齐方式</td></tr><tr><td align="left">border</td><td>1或””</td><td>规定表格单元是否拥有边框，默认为””,表示没有边框</td></tr><tr><td align="left">cellpadding</td><td>像素值</td><td>规定单元格边沿与其内容之间的空白，默认1像素</td></tr><tr><td align="left">cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认2像素</td></tr><tr><td align="left">width</td><td>像素值或百分比</td><td>规定表格的宽度</td></tr><tr><td align="left">#### 4.合并单元格</td><td></td><td></td></tr><tr><td align="left"><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs routeros">跨行合并:<span class="hljs-attribute">rowspan</span>=<span class="hljs-string">"合并单元格的个数"</span>,写在最上侧单元格<br>跨列合并:<span class="hljs-attribute">colspan</span>=<span class="hljs-string"><code class="language-hljs routeros">跨行合并:<span class="hljs-attribute">rowspan</span>=<span class="hljs-string">"合并单元格的个数"</span>,写在最上侧单元格<br>跨列合并:<span class="hljs-attribute">colspan</span>=<span class="hljs-string">"合并单元格的个数"</span>,写在最左侧单元格<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></td><td></td><td></td></tr><tr><td align="left"><font color="#0099">注:最后需要删除多余的单元格</font></td><td></td><td></td></tr></tbody></table></li></ol></li></ul><h3 id="4-8-列表标签"><a href="#4-8-列表标签" class="headerlink" title="4.8 列表标签"></a>4.8 列表标签</h3><blockquote><p>列表标签用于布局</p></blockquote><h4 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a><font color="#0099ff">1.无序列表</font></h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>中只能嵌套<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>中只能嵌套<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>></span>中可以放任何标签<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h4 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span>中只能嵌套<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span>中只能嵌套<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>></span>中可以放任何标签<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h4 id="3-自定义列表"><a href="#3-自定义列表" class="headerlink" title="3.自定义列表"></a><font color="#0099ff">3.自定义列表</font></h4><blockquote><p>自定义列表常用于对术语或名词进行解释和描述,列表项前无序号</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span>中只能嵌套<span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span>中只能嵌套<span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>></span>中可以放任何标签<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="4-9-表单标签"><a href="#4-9-表单标签" class="headerlink" title="4.9 表单标签"></a>4.9 表单标签</h3><blockquote><p>表单用于收集用户信息</p></blockquote><h4 id="1-表单域"><a href="#1-表单域" class="headerlink" title="1.表单域"></a>1.表单域</h4><blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>标签用于定义表单域,<span class="hljs-tag">&lt;<span class="hljs-name"><code class="language-hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>标签用于定义表单域,<span class="hljs-tag">&lt;<span class="hljs-name">form</span>></span>会将它范围内的表单元素信息提交给服务器<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"url地址"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"提交方式"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"表单域名称"</span>&gt;</span><br>  各种表单元素控件<br><span class="hljs-tag">&lt;/<span class="hljs-name"><code class="language-hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"url地址"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"提交方式"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"表单域名称"</span>&gt;</span><br>  各种表单元素控件<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h4 id="2-表单控件"><a href="#2-表单控件" class="headerlink" title="2.表单控件"></a>2.表单控件</h4><ul><li>input输入表单元素<blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs <input>```标签用于收集用户信息"><code class="language-hljs <input>```标签用于收集用户信息"><br>```<label>```标签用于扩大按钮选择范围，其中for和```<input>```标签中的id值必须一致 <br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>&lt;input type=”radio” id=”nan”name=”sex” value=”男” checked=”checked”&gt;<label for="nam">男</label></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs plain"><code class="language-hljs plain"> <br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><input type="text" name="username" value="请输入用户名" maxlength="6"><figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs gherkin">  <br>  type属性:<br><br>    |<span class="hljs-string">属性值</span>|<span class="hljs-string">描述</span>|<br>    |<span class="hljs-string">---</span>|<span class="hljs-string">----</span>|<br>    |<span class="hljs-string">button</span>|<span class="hljs-string">按钮</span>|<br>    |<span class="hljs-string">checkbox</span>|<span class="hljs-string">复选框，name值必须一致，设置checked属性用于默认选中此按钮</span>|<br>    |<span class="hljs-string">password</span>|<span class="hljs-string">密码框</span>|<br>    |<span class="hljs-string">text</span>|<span class="hljs-string">文本框，设置maxlength属性用于限制字符长度</span>|<br>    |<span class="hljs-string">radio</span>|<span class="hljs-string">单选按钮，&lt;font color=#0099ff&gt;name值必须一致&lt;/font&gt;，设置checked属性用于默认选中此按钮</span>|<br>    |<span class="hljs-string">&lt;font color=#0099ff&gt;submit&lt;/font&gt;</span>|<span class="hljs-string">提交按钮，value="提交"</span>|<br>    |<span class="hljs-string">reset</span>|<span class="hljs-string">重置按钮，value="重新填写"</span>|<br>    |<span class="hljs-string">file</span>|<span class="hljs-string">文件域，用于上传文件</span>|<br><br>+ select下拉表单元素<br>  &gt;```<span class="hljs-variable">&lt;select&gt;</span>```标签用于定义下拉列表，selected=<span class="hljs-string"><code class="language-hljs gherkin">  <br>  type属性:<br><br>    |<span class="hljs-string">属性值</span>|<span class="hljs-string">描述</span>|<br>    |<span class="hljs-string">---</span>|<span class="hljs-string">----</span>|<br>    |<span class="hljs-string">button</span>|<span class="hljs-string">按钮</span>|<br>    |<span class="hljs-string">checkbox</span>|<span class="hljs-string">复选框，name值必须一致，设置checked属性用于默认选中此按钮</span>|<br>    |<span class="hljs-string">password</span>|<span class="hljs-string">密码框</span>|<br>    |<span class="hljs-string">text</span>|<span class="hljs-string">文本框，设置maxlength属性用于限制字符长度</span>|<br>    |<span class="hljs-string">radio</span>|<span class="hljs-string">单选按钮，&lt;font color=#0099ff&gt;name值必须一致&lt;/font&gt;，设置checked属性用于默认选中此按钮</span>|<br>    |<span class="hljs-string">&lt;font color=#0099ff&gt;submit&lt;/font&gt;</span>|<span class="hljs-string">提交按钮，value="提交"</span>|<br>    |<span class="hljs-string">reset</span>|<span class="hljs-string">重置按钮，value="重新填写"</span>|<br>    |<span class="hljs-string">file</span>|<span class="hljs-string">文件域，用于上传文件</span>|<br><br>+ select下拉表单元素<br>  &gt;```<span class="hljs-variable">&lt;select&gt;</span>```标签用于定义下拉列表，selected=<span class="hljs-string">"selected"</span>属性为默认选中<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><form>  <select>    <option>选项1</option>    <option>选项2</option>    <option selected="selected">选项3</option>    ···  </select></form><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs xml">注：```<span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span>标签内最少有一对<span class="hljs-tag">&lt;<span class="hljs-name"><code class="language-hljs xml">注：```<span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span>标签内最少有一对<span class="hljs-tag">&lt;<span class="hljs-name">option</span>></span>标签<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></li><li>textarea文本域元素<blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs <textarea>标签用于多行文本输入的控件，常见于留言板、评论```"><code class="language-hljs <textarea>标签用于多行文本输入的控件，常见于留言板、评论```"> <br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></blockquote><form>留言板：  <textarea rows="3" cols="20">    最多不超过500字  </textarea></form><figure class="highlight gherkin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs gherkin">  |<span class="hljs-string">属性值</span>|<span class="hljs-string">描述</span>|<br>  |<span class="hljs-string">---</span>|<span class="hljs-string">----</span>|<br>  |<span class="hljs-string">rows</span>|<span class="hljs-string">显示的行数，一般用css实现</span>|<br>  |<span class="hljs-string">cols</span>|<span class="hljs-string">每行中的字符数，一般用css实现</span>|<br><br><span class="hljs-comment"><code class="language-hljs gherkin">  |<span class="hljs-string">属性值</span>|<span class="hljs-string">描述</span>|<br>  |<span class="hljs-string">---</span>|<span class="hljs-string">----</span>|<br>  |<span class="hljs-string">rows</span>|<span class="hljs-string">显示的行数，一般用css实现</span>|<br>  |<span class="hljs-string">cols</span>|<span class="hljs-string">每行中的字符数，一般用css实现</span>|<br><br><span class="hljs-comment">## 5.HTML中的注释和特殊字符</span><br>+ >HTML中的注释快捷键：ctrl + /<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure>      <!-- 注释语句 -->  ```</li><li>特殊字符<table><thead><tr><th>特殊字符</th><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td></td><td>空格符</td><td><code>&amp;nbsp;</code></td></tr><tr><td>&lt;</td><td>小于号</td><td><code>&amp;lt;</code></td></tr><tr><td>&gt;</td><td>大于号</td><td><code>&amp;gt;</code></td></tr></tbody></table></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/blog/2021/05/29/%E6%B5%8B%E8%AF%95/"/>
    <url>/blog/2021/05/29/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>测试</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/blog/2020/04/19/Markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/blog/2020/04/19/Markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown常用语法"><a href="#Markdown常用语法" class="headerlink" title="Markdown常用语法"></a>Markdown常用语法</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>在文字前面加上 -</li><li>文本</li><li>文本</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ul><li>在文字前面加上 1. 2. 3</li></ul><ol><li>文本</li><li>文本</li><li>文本</li></ol><h2 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h2><ul><li>[显示文本] (链接地址)</li><li><a href="https://zhangxuelee.github.io/" target="_blank" rel="noopener">lee</a></li></ul><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><ul><li>! [] (图片链接地址)<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/%E7%8E%8B%E4%B8%80%E5%8D%9A.jpg/510px-%E7%8E%8B%E4%B8%80%E5%8D%9A.jpg" srcset="/blog/img/loading.gif" lazyload="" alt=""></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>在引用的文字前面加上 &gt; <blockquote><p>王一博（朝鲜语：왕일박 Wang Il Bak，英语：Wang Yi Bo，1997年8月5日－），艺名一博（朝鲜语：이보 I Bo，英语：Yi Bo），出生于河南洛阳，中国大陆男歌手、舞者、演员，湖南卫视《天天向上》节目主持人，同时也是摩托车车手与滑板手。2014年10月16日，以五人男子团体UNIQ出道，为团内主领舞[1]、领Rapper，亦是团体中的忙内。2016年4月29日，正式成为湖南卫视综艺节目《天天向上》主持团天天兄弟的成员之一。[2] 同时，王一博也是一名职业摩托车车手，为中国万里达雅马哈车队（MLT YAMAHA）的签约车手，号码85，更于2019年的ARRC亚锦赛中国珠海站中获得D组新秀组冠军、混合组亚军的成绩。[3] 2019年出演电视剧《陪你到世界之巅》、《陈情令》，在剧中饰演“季向空”与“蓝忘机”一角。[4] 2019年8月，首次入选2019年福布斯中国名人榜并位列第71名。</p></blockquote></li></ul><h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><ul><li>用两个 * 包含一段文本就是粗体的语法</li><li>用一个 * 包含一段文本就是斜体的语法</li><li>*和文字之间不需要空格</li></ul><p><strong>YiBo</strong><br><em>王一博</em></p><h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><ul><li>如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。</li><li><code>代码</code></li><li>如果引用的语句为多行，可以将```置于这段代码的首行和末行。</li><li><code>多行代码</code></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>效果：</p><table><thead><tr><th>name</th><th align="center">age</th><th align="right">id</th></tr></thead><tbody><tr><td>lee</td><td align="center">18</td><td align="right">01</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>node笔记</title>
    <link href="/blog/2020/04/19/node%E7%AC%94%E8%AE%B0/"/>
    <url>/blog/2020/04/19/node%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Node介绍"><a href="#Node介绍" class="headerlink" title="Node介绍"></a>Node介绍</h1><h1 id="第一章、node基础"><a href="#第一章、node基础" class="headerlink" title="第一章、node基础"></a>第一章、node基础</h1><h2 id="1、-Node-js是什么"><a href="#1、-Node-js是什么" class="headerlink" title="1、 Node.js是什么"></a>1、 Node.js是什么</h2><ul><li>Node.js是JavaScript 运行时</li><li>Node.js是JavaScript的运行平台</li><li>Node.js既不是语言，也不是框架，它是一个平台</li><li>浏览器中的JavaScript<ul><li>EcmaScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>Bom</li><li>Dom</li></ul></li><li>Node.js中的JavaScript<ul><li>没有Bom，Dom</li><li>EcmaScript</li><li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http服务器</li></ul></li></ul></li><li>构建与Chrome的V8引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul></li><li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul><li>envent-driven    事件驱动</li><li>non-blocking I/O mode   非阻塞I/O模型（异步）</li><li>ightweight and efficent.   轻量和高效</li></ul></li><li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>npm install jquery</li></ul></li></ul><h2 id="2、Node能做什么"><a href="#2、Node能做什么" class="headerlink" title="2、Node能做什么"></a>2、Node能做什么</h2><ul><li>web服务器后台</li><li>命令行工具<ul><li>npm(node)</li><li>git(c语言)</li><li>hexo（node）</li><li>…</li></ul></li><li>对于前端工程师来讲，接触最多的是它的命令行工具<ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>gulp</li><li>npm</li></ul></li></ul><h2 id="3、安装Node环境"><a href="#3、安装Node环境" class="headerlink" title="3、安装Node环境"></a>3、安装Node环境</h2><ul><li>查看Node环境的版本号</li><li>下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li><li>确认Node环境是否安装成功<ul><li>查看node的版本号：<code>node --version</code></li></ul></li><li>配置环境变量</li></ul><h2 id="4、解析执行JavaScript"><a href="#4、解析执行JavaScript" class="headerlink" title="4、解析执行JavaScript"></a>4、解析执行JavaScript</h2><ol><li>创建编写JavaScript脚本文件</li><li>打开终端，定位脚本文件的所属目录</li><li>输入<code>node  文件名</code>执行对应的文件</li></ol><p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p><h2 id="5、文件的读写"><a href="#5、文件的读写" class="headerlink" title="5、文件的读写"></a>5、文件的读写</h2><p>5.1、文件读取： fs.readFile()</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">//浏览器中的JavaScript是没有文件操作能力的</span><br><span class="hljs-comment">//但是Node中的JavaScript具有文件操作能力</span><br><span class="hljs-comment">//fs是file-system的简写，就是文件系统的意思</span><br><span class="hljs-comment">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span><br><span class="hljs-comment">//在fs这个核心模块中，就提供了人所有文件操作相关的API</span><br><span class="hljs-comment">//例如 fs.readFile就是用来读取文件的</span><br><br><span class="hljs-comment">//  1.使用fs核心模块</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br><span class="hljs-comment">// 2.读取文件</span><br>fs.readFile(<span class="hljs-string">'./data/a.txt'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br>   <span class="hljs-keyword">if</span>(err){<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'文件读取失败'</span>);<br>   }<br>    <span class="hljs-keyword">else</span>{<br>         <span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-comment">//浏览器中的JavaScript是没有文件操作能力的</span><br><span class="hljs-comment">//但是Node中的JavaScript具有文件操作能力</span><br><span class="hljs-comment">//fs是file-system的简写，就是文件系统的意思</span><br><span class="hljs-comment">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span><br><span class="hljs-comment">//在fs这个核心模块中，就提供了人所有文件操作相关的API</span><br><span class="hljs-comment">//例如 fs.readFile就是用来读取文件的</span><br><br><span class="hljs-comment">//  1.使用fs核心模块</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br><span class="hljs-comment">// 2.读取文件</span><br>fs.readFile(<span class="hljs-string">'./data/a.txt'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br>   <span class="hljs-keyword">if</span>(err){<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'文件读取失败'</span>);<br>   }<br>    <span class="hljs-keyword">else</span>{<br>         <span class="hljs-built_in">console</span>.log(data.toString());<br>    }<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>5.2、文件写入：fs.writeFile()</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">//  1.使用fs核心模块</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br><span class="hljs-comment">// 2.将数据写入文件</span><br>fs.writeFile(<span class="hljs-string">'./data/a.txt'</span>,<span class="hljs-string">'我是文件写入的信息'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br>   <span class="hljs-keyword">if</span>(err){<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'文件写入失败'</span>);<br>   }<br>    <span class="hljs-keyword">else</span>{<br>         <span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-comment">//  1.使用fs核心模块</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br><span class="hljs-comment">// 2.将数据写入文件</span><br>fs.writeFile(<span class="hljs-string">'./data/a.txt'</span>,<span class="hljs-string">'我是文件写入的信息'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br>   <span class="hljs-keyword">if</span>(err){<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'文件写入失败'</span>);<br>   }<br>    <span class="hljs-keyword">else</span>{<br>         <span class="hljs-built_in">console</span>.log(data.toString());<br>    }<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="6、http"><a href="#6、http" class="headerlink" title="6、http"></a>6、http</h2><p>6.1、服务器：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 1.加载http核心模块</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);<br><br><span class="hljs-comment">// 2.使用http.createServer()创建一个web服务器</span><br><span class="hljs-keyword">var</span> server = http.createServer();<br><br><span class="hljs-comment">// 3.服务器要做的事儿</span><br><span class="hljs-comment">// 提供服务：对数据服务</span><br><span class="hljs-comment">// 发请求</span><br><span class="hljs-comment">//接收请求</span><br><span class="hljs-comment">//处理请求</span><br><span class="hljs-comment">//反馈（发送响应）</span><br><span class="hljs-comment">//当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span><br>server.on(<span class="hljs-string">'request'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'收到客户的请求了'</span>)<br>})<br><br><span class="hljs-comment">// 4.绑定端口号，启动服务</span><br>server.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// 1.加载http核心模块</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);<br><br><span class="hljs-comment">// 2.使用http.createServer()创建一个web服务器</span><br><span class="hljs-keyword">var</span> server = http.createServer();<br><br><span class="hljs-comment">// 3.服务器要做的事儿</span><br><span class="hljs-comment">// 提供服务：对数据服务</span><br><span class="hljs-comment">// 发请求</span><br><span class="hljs-comment">//接收请求</span><br><span class="hljs-comment">//处理请求</span><br><span class="hljs-comment">//反馈（发送响应）</span><br><span class="hljs-comment">//当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span><br>server.on(<span class="hljs-string">'request'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'收到客户的请求了'</span>)<br>})<br><br><span class="hljs-comment">// 4.绑定端口号，启动服务</span><br>server.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'runing...'</span>)<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h1 id="第二章、Node中的模块系统"><a href="#第二章、Node中的模块系统" class="headerlink" title="第二章、Node中的模块系统"></a>第二章、Node中的模块系统</h1><p>使用Node编写应用程序主要就是在使用：</p><ul><li><p>EcmaScript语言</p><ul><li>和浏览器一样，在Node中没有Bom和Dom</li></ul></li><li><p>核心模块</p><ul><li>文件操作的fs</li><li>http服务操作的http</li><li>url路径操作模块</li><li>path路径处理模块</li><li>os操作系统信息</li></ul></li><li><p>第三方模块</p><ul><li>art-template</li><li>必须通过npm来下载才可以使用</li></ul></li><li><p>自己写的模块</p><ul><li>自己创建的文件</li></ul></li></ul><h2 id="一、什么是模块化"><a href="#一、什么是模块化" class="headerlink" title="一、什么是模块化"></a>一、什么是模块化</h2><ul><li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】</li><li>通信规则<ul><li>加载require</li><li>导出exports</li></ul></li></ul><h2 id="二、CommonJS模块规范"><a href="#二、CommonJS模块规范" class="headerlink" title="二、CommonJS模块规范"></a>二、CommonJS模块规范</h2><p>在Node中的JavaScript还有一个重要的概念，模块系统。</p><ul><li><p>模块作用域</p></li><li><p>使用require方法来加载模块</p></li><li><p>使用exports接口对象来导出模板中的成员</p><h3 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h3><p>语法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs java"><span class="hljs-keyword">var</span> 自定义变量名 = require(<span class="hljs-string"><code class="language-hljs java"><span class="hljs-keyword">var</span> 自定义变量名 = require(<span class="hljs-string">'模块'</span>)<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>作用：</p><ul><li>执行被加载模块中的代码</li><li>得到被加载模块中的<code>exports</code>导出接口对象</li></ul><h3 id="导出exports"><a href="#导出exports" class="headerlink" title="导出exports"></a>导出<code>exports</code></h3><ul><li><p>Node中是模块作用域，默认文件中所有的成员只在当前模块有效</p></li><li><p>对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到<code>exports</code>接口对象中就可以了</p><p>导出多个成员（必须在对象中）：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">exports.a = <span class="hljs-number">123</span>;<br>exports.b = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bbb'</span>)<br>};<br>exports.c = {<br>    foo:<span class="hljs-string">"bar"</span><br>};<br>exports.d = <span class="hljs-string"><code class="language-hljs javascript">exports.a = <span class="hljs-number">123</span>;<br>exports.b = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'bbb'</span>)<br>};<br>exports.c = {<br>    foo:<span class="hljs-string">"bar"</span><br>};<br>exports.d = <span class="hljs-string">'hello'</span>;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></li></ul></li></ul><pre><code class="hljs">导出单个成员（拿到的就是函数，字符串）：<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">'hello'</span>;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure>以下情况会覆盖：<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">'hello'</span>;<br><span class="hljs-comment">//后者会覆盖前者</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x,y</span>) </span>{<br>    <span class="hljs-keyword"><code class="language-hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-string">'hello'</span>;<br><span class="hljs-comment">//后者会覆盖前者</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x,y</span>) </span>{<br>    <span class="hljs-keyword">return</span> x+y;<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure>也可以通过以下方法来导出多个成员：<figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-built_in">module</span>.exports = {<br>    foo = <span class="hljs-string">'hello'</span>,<br>    add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">return</span> x+y;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure></code></pre><h2 id="三、模块原理"><a href="#三、模块原理" class="headerlink" title="三、模块原理"><code class="language-hljs javascript"><span class="hljs-built_in">module</span>.exports = {<br>    foo = <span class="hljs-string">'hello'</span>,<br>    add:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">return</span> x+y;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure></code></pre><h2 id="三、模块原理"><a href="#三、模块原理" class="headerlink" title="三、模块原理"></a>三、模块原理</h2><p>exports和<code>module.exports</code>的一个引用：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(exports === <span class="hljs-built_in">module</span>.exports);<span class="hljs-comment">//true</span><br><br>exports.foo = <span class="hljs-string">'bar'</span>;<br><br><span class="hljs-comment">//等价于</span><br><span class="hljs-built_in">module</span>.exports.foo = <span class="hljs-string">'bar'</span>;<br><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></td></tr></tbody></table></figure><p><code>当给exports重新赋值后，exports！= module.exports.</code></p><p><code>最终return的是module.exports,无论exports中的成员是什么都没用。</code></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">真正去使用的时候：<br>导出单个成员：exports.xxx = xxx;<br>导出多个成员：<span class="hljs-built_in"><code class="language-hljs javascript">真正去使用的时候：<br>导出单个成员：exports.xxx = xxx;<br>导出多个成员：<span class="hljs-built_in">module</span>.exports 或者 modeule.exports = {};<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 引用服务</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><span class="hljs-comment">// 引用模板</span><br><span class="hljs-keyword">var</span> template = <span class="hljs-built_in">require</span>(<span class="hljs-string">'art-template'</span>);<br><span class="hljs-comment">// 创建服务</span><br><span class="hljs-keyword">var</span> server = http.createServer();<br><span class="hljs-comment">// 公共路径</span><br><span class="hljs-keyword">var</span> wwwDir = <span class="hljs-string">'D:/app/www'</span>;<br>server.on(<span class="hljs-string">'request'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{<br>    <span class="hljs-keyword">var</span> url = req.url;<br>    <span class="hljs-comment">// 读取文件</span><br>    fs.readFile(<span class="hljs-string">'./template-apche.html'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>{<br>        <span class="hljs-keyword">if</span> (err) {<br>            <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">'404 Not Found'</span>);<br>        }<br>        fs.readdir(wwwDir, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, files</span>) </span>{<br>            <span class="hljs-keyword">if</span> (err) {<br>                <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">'Can not find www Dir.'</span>)<br>            }<br>            <span class="hljs-comment">// 使用模板引擎解析替换data中的模板字符串</span><br>            <span class="hljs-comment">// 去xmpTempleteList.html中编写模板语法</span><br>            <span class="hljs-keyword">var</span> htmlStr = template.render(data.toString(), { <br>                title: <span class="hljs-string">'D:/app/www/ 的索引'</span>,<br>                files:files <br>            });<br>            <span class="hljs-comment">// 发送响应数据</span><br>            res.end(htmlStr);<br>        })<br>    })<br>});<br>server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// 引用服务</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><span class="hljs-comment">// 引用模板</span><br><span class="hljs-keyword">var</span> template = <span class="hljs-built_in">require</span>(<span class="hljs-string">'art-template'</span>);<br><span class="hljs-comment">// 创建服务</span><br><span class="hljs-keyword">var</span> server = http.createServer();<br><span class="hljs-comment">// 公共路径</span><br><span class="hljs-keyword">var</span> wwwDir = <span class="hljs-string">'D:/app/www'</span>;<br>server.on(<span class="hljs-string">'request'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{<br>    <span class="hljs-keyword">var</span> url = req.url;<br>    <span class="hljs-comment">// 读取文件</span><br>    fs.readFile(<span class="hljs-string">'./template-apche.html'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, data</span>) </span>{<br>        <span class="hljs-keyword">if</span> (err) {<br>            <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">'404 Not Found'</span>);<br>        }<br>        fs.readdir(wwwDir, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, files</span>) </span>{<br>            <span class="hljs-keyword">if</span> (err) {<br>                <span class="hljs-keyword">return</span> res.end(<span class="hljs-string">'Can not find www Dir.'</span>)<br>            }<br>            <span class="hljs-comment">// 使用模板引擎解析替换data中的模板字符串</span><br>            <span class="hljs-comment">// 去xmpTempleteList.html中编写模板语法</span><br>            <span class="hljs-keyword">var</span> htmlStr = template.render(data.toString(), { <br>                title: <span class="hljs-string">'D:/app/www/ 的索引'</span>,<br>                files:files <br>            });<br>            <span class="hljs-comment">// 发送响应数据</span><br>            res.end(htmlStr);<br>        })<br>    })<br>});<br>server.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'running....'</span>);<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-number">1.</span>jQuery中的each 和 原生JavaScript方法forEach的区别：<br>提供源头：<br>    原生js是es5提供的（不兼容IE8）,<br>        jQuery的each是jQuery第三方库提供的（如果要使用需要用<span class="hljs-number">2</span>以下的版本也就是<span class="hljs-number">1.</span>版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].slice.call(jQuery实例对象)）才能使用<br><span class="hljs-number">2.</span>模块中导出多个成员和导出单个成员<br><span class="hljs-number">3.301</span>和<span class="hljs-number">302</span>的区别：<br><span class="hljs-number">301</span>永久重定向,浏览器会记住<br>    <span class="hljs-number">302</span>临时重定向<br><span class="hljs-number">4.</span>exports和<span class="hljs-built_in">module</span>.exports的区别:<br>每个模块中都有一个<span class="hljs-built_in">module</span>对象<br>    <span class="hljs-built_in">module</span>对象中有一个exports对象<br>    我们可以把需要导出的成员都挂载到<span class="hljs-built_in">module</span>.exports接口对象中<br>也就是<span class="hljs-string">`module.exports.xxx = xxx`</span>的方式<br>    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫<span class="hljs-string">`exports`</span><br>    <span class="hljs-string">`exports === module.exports`</span>结果为<span class="hljs-literal">true</span>,所以完全可以<span class="hljs-string">`exports.xxx = xxx`</span><br>    当一个模块需要导出单个成员的时候必须使用<span class="hljs-string">`module.exports = xxx`</span>的方式，=,使用<span class="hljs-string">`exports = xxx`</span>不管用,因为每个模块最终<span class="hljs-keyword">return</span>的是<span class="hljs-built_in">module</span>.exports,而exports只是<span class="hljs-built_in">module</span>.exports的一个引用,所以<span class="hljs-string">`exports`</span>即使重新赋值,也不会影响<span class="hljs-string">`module.exports`</span>。<br>    有一种赋值方式比较特殊：<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-number">1.</span>jQuery中的each 和 原生JavaScript方法forEach的区别：<br>提供源头：<br>    原生js是es5提供的（不兼容IE8）,<br>        jQuery的each是jQuery第三方库提供的（如果要使用需要用<span class="hljs-number">2</span>以下的版本也就是<span class="hljs-number">1.</span>版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].slice.call(jQuery实例对象)）才能使用<br><span class="hljs-number">2.</span>模块中导出多个成员和导出单个成员<br><span class="hljs-number">3.301</span>和<span class="hljs-number">302</span>的区别：<br><span class="hljs-number">301</span>永久重定向,浏览器会记住<br>    <span class="hljs-number">302</span>临时重定向<br><span class="hljs-number">4.</span>exports和<span class="hljs-built_in">module</span>.exports的区别:<br>每个模块中都有一个<span class="hljs-built_in">module</span>对象<br>    <span class="hljs-built_in">module</span>对象中有一个exports对象<br>    我们可以把需要导出的成员都挂载到<span class="hljs-built_in">module</span>.exports接口对象中<br>也就是<span class="hljs-string">`module.exports.xxx = xxx`</span>的方式<br>    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫<span class="hljs-string">`exports`</span><br>    <span class="hljs-string">`exports === module.exports`</span>结果为<span class="hljs-literal">true</span>,所以完全可以<span class="hljs-string">`exports.xxx = xxx`</span><br>    当一个模块需要导出单个成员的时候必须使用<span class="hljs-string">`module.exports = xxx`</span>的方式，=,使用<span class="hljs-string">`exports = xxx`</span>不管用,因为每个模块最终<span class="hljs-keyword">return</span>的是<span class="hljs-built_in">module</span>.exports,而exports只是<span class="hljs-built_in">module</span>.exports的一个引用,所以<span class="hljs-string">`exports`</span>即使重新赋值,也不会影响<span class="hljs-string">`module.exports`</span>。<br>    有一种赋值方式比较特殊：<span class="hljs-string">`exports = module.exports`</span>这个用来新建立引用关系的。<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h1 id="require的加载规则"><a href="#require的加载规则" class="headerlink" title="require的加载规则"></a>require的加载规则</h1><ul><li><p>核心模块</p><ul><li>模块名</li></ul></li><li><p>第三方模块</p><ul><li>模块名</li></ul></li><li><p>用户自己写的</p><ul><li>路径</li></ul></li></ul><h2 id="require的加载规则："><a href="#require的加载规则：" class="headerlink" title="require的加载规则："></a>require的加载规则：</h2><ul><li><p>优先从缓存加载</p></li><li><p>判断模块标识符</p><ul><li>核心模块</li><li>自己写的模块（路径形式的模块）</li><li>第三方模块（node_modules）<ul><li>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</li><li>npm<ul><li>开发人员可以把写好的框架库发布到npm上</li><li>使用者通过npm命令来下载</li></ul></li><li>使用方式：<code>var 名称 = require('npm install【下载包】 的包名')</code><ul><li>node_modules/express/package.json main</li><li>如果package.json或者main不成立，则查找被选择项：index.js</li><li>如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错</li></ul></li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 如果非路径形式的标识</span><br><span class="hljs-comment">// 路径形式的标识：</span><br>    <span class="hljs-comment">// ./  当前目录 不可省略</span><br>    <span class="hljs-comment">// ../  上一级目录  不可省略</span><br>    <span class="hljs-comment">//  /xxx也就是D:/xxx</span><br>    <span class="hljs-comment">// 带有绝对路径几乎不用（D:/a/foo.js）</span><br><span class="hljs-comment">// 首位表示的是当前文件模块所属磁盘根目录</span><br><span class="hljs-comment">// require('./a'); </span><br><br><br><span class="hljs-comment">// 核心模块</span><br><span class="hljs-comment">// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>); <br><br><span class="hljs-comment">// 第三方模块</span><br><span class="hljs-comment">// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require('包名')来加载才可以使用</span><br><span class="hljs-comment">// 第三方包的名字不可能和核心模块的名字是一样的</span><br><span class="hljs-comment">// 既不是核心模块，也不是路径形式的模块</span><br><span class="hljs-comment">//      先找到当前文所述目录的node_modules</span><br><span class="hljs-comment">//      然后找node_modules/art-template目录</span><br><span class="hljs-comment">//      node_modules/art-template/package.json</span><br><span class="hljs-comment">//      node_modules/art-template/package.json中的main属性</span><br><span class="hljs-comment">//      main属性记录了art-template的入口模块</span><br><span class="hljs-comment">//      然后加载使用这个第三方包</span><br><span class="hljs-comment">//      实际上最终加载的还是文件</span><br><br><span class="hljs-comment">//      如果package.json不存在或者mian指定的入口模块不存在</span><br><span class="hljs-comment">//      则node会自动找该目录下的index.js</span><br><span class="hljs-comment">//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件</span><br><span class="hljs-comment">//      </span><br>        <span class="hljs-comment">// 如果条件都不满足则会进入上一级目录进行查找</span><br><span class="hljs-comment">// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件</span><br><span class="hljs-keyword">var</span> template = <span class="hljs-built_in">require</span>(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// 如果非路径形式的标识</span><br><span class="hljs-comment">// 路径形式的标识：</span><br>    <span class="hljs-comment">// ./  当前目录 不可省略</span><br>    <span class="hljs-comment">// ../  上一级目录  不可省略</span><br>    <span class="hljs-comment">//  /xxx也就是D:/xxx</span><br>    <span class="hljs-comment">// 带有绝对路径几乎不用（D:/a/foo.js）</span><br><span class="hljs-comment">// 首位表示的是当前文件模块所属磁盘根目录</span><br><span class="hljs-comment">// require('./a'); </span><br><br><br><span class="hljs-comment">// 核心模块</span><br><span class="hljs-comment">// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>); <br><br><span class="hljs-comment">// 第三方模块</span><br><span class="hljs-comment">// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require('包名')来加载才可以使用</span><br><span class="hljs-comment">// 第三方包的名字不可能和核心模块的名字是一样的</span><br><span class="hljs-comment">// 既不是核心模块，也不是路径形式的模块</span><br><span class="hljs-comment">//      先找到当前文所述目录的node_modules</span><br><span class="hljs-comment">//      然后找node_modules/art-template目录</span><br><span class="hljs-comment">//      node_modules/art-template/package.json</span><br><span class="hljs-comment">//      node_modules/art-template/package.json中的main属性</span><br><span class="hljs-comment">//      main属性记录了art-template的入口模块</span><br><span class="hljs-comment">//      然后加载使用这个第三方包</span><br><span class="hljs-comment">//      实际上最终加载的还是文件</span><br><br><span class="hljs-comment">//      如果package.json不存在或者mian指定的入口模块不存在</span><br><span class="hljs-comment">//      则node会自动找该目录下的index.js</span><br><span class="hljs-comment">//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件</span><br><span class="hljs-comment">//      </span><br>        <span class="hljs-comment">// 如果条件都不满足则会进入上一级目录进行查找</span><br><span class="hljs-comment">// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件</span><br><span class="hljs-keyword">var</span> template = <span class="hljs-built_in">require</span>(<span class="hljs-string">'art-template'</span>);<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="模块标识符中的-和文件操作路径中的"><a href="#模块标识符中的-和文件操作路径中的" class="headerlink" title="模块标识符中的/和文件操作路径中的/"></a>模块标识符中的<code>/</code>和文件操作路径中的<code>/</code></h2><p>文件操作路径：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 咱们所使用的所有文件操作的API都是异步的</span><br><span class="hljs-comment">// 就像ajax请求一样</span><br><span class="hljs-comment">// 读取文件</span><br><span class="hljs-comment">// 文件操作中 ./ 相当于当前模块所处磁盘根目录</span><br><span class="hljs-comment">// ./index.txt    相对于当前目录</span><br><span class="hljs-comment">// /index.txt    相对于当前目录</span><br><span class="hljs-comment">// /index.txt   绝对路径,当前文件模块所处根目录</span><br><span class="hljs-comment">// d:express/index.txt   绝对路径</span><br>fs.readFile(<span class="hljs-string">'./index.txt'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br>    <span class="hljs-keyword">if</span>(err){<br>       <span class="hljs-keyword">return</span>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br>    }<br>    <span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-comment">// 咱们所使用的所有文件操作的API都是异步的</span><br><span class="hljs-comment">// 就像ajax请求一样</span><br><span class="hljs-comment">// 读取文件</span><br><span class="hljs-comment">// 文件操作中 ./ 相当于当前模块所处磁盘根目录</span><br><span class="hljs-comment">// ./index.txt    相对于当前目录</span><br><span class="hljs-comment">// /index.txt    相对于当前目录</span><br><span class="hljs-comment">// /index.txt   绝对路径,当前文件模块所处根目录</span><br><span class="hljs-comment">// d:express/index.txt   绝对路径</span><br>fs.readFile(<span class="hljs-string">'./index.txt'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br>    <span class="hljs-keyword">if</span>(err){<br>       <span class="hljs-keyword">return</span>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br>    }<br>    <span class="hljs-built_in">console</span>.log(data.toString());<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>模块操作路径：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 在模块加载中，相对路径中的./不能省略</span><br><span class="hljs-comment">// 这里省略了.也是磁盘根目录</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">'./index'</span>)(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// 在模块加载中，相对路径中的./不能省略</span><br><span class="hljs-comment">// 这里省略了.也是磁盘根目录</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">'./index'</span>)(<span class="hljs-string">'hello'</span>)<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><ul><li>node package manage(node包管理器)</li><li>通过npm命令安装jQuery包（npm install –save jquery），在安装时加上–save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）</li></ul><h3 id="npm网站"><a href="#npm网站" class="headerlink" title="npm网站"></a>npm网站</h3><blockquote><p>​    npmjs.com    网站   是用来搜索npm包的</p></blockquote><h3 id="npm命令行工具"><a href="#npm命令行工具" class="headerlink" title="npm命令行工具"></a>npm命令行工具</h3><p>npm是一个命令行工具，只要安装了node就已经安装了npm。</p><p>npm也有版本概念，可以通过<code>npm --version</code>来查看npm的版本</p><p>升级npm(自己升级自己)：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">npm install --global npm<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>npm init(生成package.json说明书文件)<ul><li>npm init -y(可以跳过向导，快速生成)</li></ul></li><li>npm install<ul><li>一次性把dependencies选项中的依赖项全部安装</li><li>简写（npm i）</li></ul></li><li>npm install 包名<ul><li>只下载</li><li>简写（npm i 包名）</li></ul></li><li>npm install –save 包名<ul><li>下载并且保存依赖项（package.json文件中的dependencies选项）</li><li>简写（npm i  包名）</li></ul></li><li>npm uninstall 包名<ul><li>只删除，如果有依赖项会依然保存</li><li>简写（npm un 包名）</li></ul></li><li>npm uninstall –save 包名<ul><li>删除的同时也会把依赖信息全部删除</li><li>简写（npm un 包名）</li></ul></li><li>npm help<ul><li>查看使用帮助</li></ul></li><li>npm 命令 –help<ul><li>查看具体命令的使用帮助（npm uninstall –help）</li></ul></li></ul><h3 id="解决npm被墙问题"><a href="#解决npm被墙问题" class="headerlink" title="解决npm被墙问题"></a>解决npm被墙问题</h3><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</p><blockquote><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p></blockquote><p>安装淘宝的cnpm：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">npm install -g cnpm --registry=https:<span class="hljs-comment"><code class="language-hljs javascript">npm install -g cnpm --registry=https:<span class="hljs-comment">//registry.npm.taobao.org;</span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs shell"><span class="hljs-meta">#</span><span class="bash">在任意目录执行都可以</span><br><span class="hljs-meta">#</span><span class="bash">--global表示安装到全局，而非当前目录</span><br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell"><span class="hljs-meta">#</span><span class="bash">在任意目录执行都可以</span><br><span class="hljs-meta">#</span><span class="bash">--global表示安装到全局，而非当前目录</span><br><span class="hljs-meta">#</span><span class="bash">--global不能省略，否则不管用</span><br>npm install --global cnpm<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs shell"><span class="hljs-meta">#</span><span class="bash">走国外的npm服务器下载jQuery包，速度比较慢</span><br>npm install jQuery;<br><br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell"><span class="hljs-meta">#</span><span class="bash">走国外的npm服务器下载jQuery包，速度比较慢</span><br>npm install jQuery;<br><br><span class="hljs-meta">#</span><span class="bash">使用cnpm就会通过淘宝的服务器来下载jQuery</span><br>cnpm install jQuery;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs shell"><code class="language-hljs shell">npm install jquery --registry=https://npm.taobao.org;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs shell">npm config set registry https://npm.taobao.org;<br><br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell">npm config set registry https://npm.taobao.org;<br><br><span class="hljs-meta">#</span><span class="bash">查看npm配置信息</span><br>npm config list;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p><p>这个文件可以通过<code>npm init</code>自动初始化出来</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><br>D:\code\node中的模块系统&gt;npm init<br>This utility will walk you through creating a package.json file.<br>It only covers the most common items, and tries to guess sensible defaults.<br><br>See <span class="hljs-string">`npm help json`</span> <span class="hljs-keyword">for</span> definitive documentation on these fields<br>and exactly what they <span class="hljs-keyword">do</span>.<br><br>Use <span class="hljs-string">`npm install &lt;pkg&gt;`</span> afterwards to install a package and<br>save it <span class="hljs-keyword">as</span> a dependency <span class="hljs-keyword">in</span> the package.json file.<br><br>Press ^C at any time to quit.<br>package name: (node中的模块系统)<br>Sorry, name can only contain URL-friendly characters.<br>package name: (node中的模块系统) cls<br>version: (<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>)<br>description: 这是一个测试项目<br>entry point: (main.js)<br>test command:<br>git repository:<br>keywords:<br>author: xiaochen<br>license: (ISC)<br>About to write to D:\code\node中的模块系统\package.json:<br><br>{<br>  <span class="hljs-string">"name"</span>: <span class="hljs-string">"cls"</span>,<br>  <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.0"</span>,<br>  <span class="hljs-string">"description"</span>: <span class="hljs-string">"这是一个测试项目"</span>,<br>  <span class="hljs-string">"main"</span>: <span class="hljs-string">"main.js"</span>,<br>  <span class="hljs-string">"scripts"</span>: {<br>    <span class="hljs-string">"test"</span>: <span class="hljs-string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br>  },<br>  <span class="hljs-string">"author"</span>: <span class="hljs-string">"xiaochen"</span>,<br>  <span class="hljs-string">"license"</span>: <span class="hljs-string">"ISC"</span><br>}<br><br><br>Is <span class="hljs-keyword"><code class="language-hljs javascript"><br>D:\code\node中的模块系统&gt;npm init<br>This utility will walk you through creating a package.json file.<br>It only covers the most common items, and tries to guess sensible defaults.<br><br>See <span class="hljs-string">`npm help json`</span> <span class="hljs-keyword">for</span> definitive documentation on these fields<br>and exactly what they <span class="hljs-keyword">do</span>.<br><br>Use <span class="hljs-string">`npm install &lt;pkg&gt;`</span> afterwards to install a package and<br>save it <span class="hljs-keyword">as</span> a dependency <span class="hljs-keyword">in</span> the package.json file.<br><br>Press ^C at any time to quit.<br>package name: (node中的模块系统)<br>Sorry, name can only contain URL-friendly characters.<br>package name: (node中的模块系统) cls<br>version: (<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>)<br>description: 这是一个测试项目<br>entry point: (main.js)<br>test command:<br>git repository:<br>keywords:<br>author: xiaochen<br>license: (ISC)<br>About to write to D:\code\node中的模块系统\package.json:<br><br>{<br>  <span class="hljs-string">"name"</span>: <span class="hljs-string">"cls"</span>,<br>  <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.0"</span>,<br>  <span class="hljs-string">"description"</span>: <span class="hljs-string">"这是一个测试项目"</span>,<br>  <span class="hljs-string">"main"</span>: <span class="hljs-string">"main.js"</span>,<br>  <span class="hljs-string">"scripts"</span>: {<br>    <span class="hljs-string">"test"</span>: <span class="hljs-string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br>  },<br>  <span class="hljs-string">"author"</span>: <span class="hljs-string">"xiaochen"</span>,<br>  <span class="hljs-string">"license"</span>: <span class="hljs-string">"ISC"</span><br>}<br><br><br>Is <span class="hljs-keyword">this</span> OK? (yes) yes<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p><p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p><ul><li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li><li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li></ul><h2 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h2><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p><p>npm5以后才加入这个文件</p><p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p><ul><li>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</li><li>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</li><li><code>package-lock.json</code>这个文件会包含<code>node_modules</code>中所有包的信息（版本，下载地址。。。）<ul><li>这样的话重新<code>npm install</code>的时候速度就可以提升</li></ul></li><li>从文件来看，有一个<code>lock</code>称之为锁<ul><li>这个<code>lock</code>使用来锁版本的</li><li>如果项目依赖了<code>1.1.1</code>版本</li><li>如果你重新install其实会下载最细版本，而不是<code>1.1.1</code></li><li><code>package-lock.json</code>的另外一个作用就是锁定版本号，防止自动升级</li></ul></li></ul><h2 id="path路径操作模块"><a href="#path路径操作模块" class="headerlink" title="path路径操作模块"></a>path路径操作模块</h2><blockquote><p>参考文档：<a href="https://nodejs.org/docs/latest-v13.x/api/path.html" target="_blank" rel="noopener">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p></blockquote><ul><li>path.basename：获取路径的文件名，默认包含扩展名</li><li>path.dirname：获取路径中的目录部分</li><li>path.extname：获取一个路径中的扩展名部分</li><li>path.parse：把路径转换为对象<ul><li>root：根路径</li><li>dir：目录</li><li>base：包含后缀名的文件名</li><li>ext：后缀名</li><li>name：不包含后缀名的文件名</li></ul></li><li>path.join：拼接路径</li><li>path.isAbsolute：判断一个路径是否为绝对路径<img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200315150610001.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200315150610001"></li></ul><h1 id="Node中的其它成员-dirname-filename"><a href="#Node中的其它成员-dirname-filename" class="headerlink" title="Node中的其它成员(dirname,filename)"></a>Node中的其它成员(<strong>dirname,</strong>filename)</h1><p>在每个模块中，除了<code>require</code>,<code>exports</code>等模块相关的API之外，还有两个特殊的成员：</p><ul><li><p><code>__dirname</code>，是一个成员，可以用来<strong>动态</strong>获取当前文件模块所属目录的绝对路径</p></li><li><p><code>__filename</code>，可以用来<strong>动态</strong>获取当前文件的绝对路径（包含文件名）</p></li><li><p><code>__dirname</code>和<code>filename</code>是不受执行node命令所属路径影响的</p><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200315151551873.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200315151551873"></p></li></ul><p>在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。</p><p>所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。</p><p>就可以使用<code>__dirname</code>或者<code>__filename</code>来帮助我们解决这个问题</p><p>在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用<code>path.join()</code>来辅助拼接</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);<br><br><span class="hljs-comment">// console.log(__dirname + 'a.txt');</span><br><span class="hljs-comment">// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径</span><br>fs.readFile(path.join(__dirname + <span class="hljs-string">'/a.txt'</span>),<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-keyword">throw</span> err<br>}<br><span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);<br><br><span class="hljs-comment">// console.log(__dirname + 'a.txt');</span><br><span class="hljs-comment">// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径</span><br>fs.readFile(path.join(__dirname + <span class="hljs-string">'/a.txt'</span>),<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-keyword">throw</span> err<br>}<br><span class="hljs-built_in">console</span>.log(data);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><blockquote><p>补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）</p></blockquote><blockquote><p><strong>注意：</strong></p><p><strong>模块中的路径标识和文件操作中的相对路径标识不一致</strong></p><p><strong>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</strong></p></blockquote><h1 id="Express（快速的）"><a href="#Express（快速的）" class="headerlink" title="Express（快速的）"></a>Express（快速的）</h1><p>作者：Tj</p><p>原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。</p><p>在node中有很多web开发框架。主要学习express</p><ul><li><p><code>http://expressjs.com/</code>,其中主要封装的是http。</p></li><li><pre class="line-numbers language-javascript"><span class="comment"><code class="language-javascript"><span class="comment">// 1 安装</span><span class="comment">// 2 引包</span><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);<span class="comment">// 3 创建服务器应用程序</span><span class="comment">//      也就是原来的http.createServer();</span><span class="keyword">var</span> app = express();<span class="comment">// 公开指定目录</span><span class="comment">// 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源</span><span class="comment">// 在Express中开放资源就是一个API的事</span>app.use(<span class="string">'/public/'</span>,express.static(<span class="string">'/public/'</span>));<span class="comment">//模板引擎在Express中开放模板也是一个API的事</span><span class="comment">// 当服务器收到get请求 / 的时候，执行回调处理函数</span>app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>{    res.send(<span class="string">'hello express'</span>);})<span class="comment">// 相当于server.listen</span>app.listen(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{    <span class="built_in">console</span>.log(<span class="string">'app is runing at port 3000'</span>);})<!--￼<span class="number">23</span>--><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world:"></a>hello world:<img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200310124850557.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200310124850557"></h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 引入express</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<br><br><span class="hljs-comment">// 1. 创建app</span><br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">//  2. </span><br>app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    <span class="hljs-comment">// 1</span><br>    <span class="hljs-comment">// res.write('Hello');</span><br>    <span class="hljs-comment">// res.write('World');</span><br>    <span class="hljs-comment">// res.end()</span><br><br>    <span class="hljs-comment">// 2</span><br>    <span class="hljs-comment">// res.end('hello world');</span><br><br>    <span class="hljs-comment">// 3</span><br>    res.send(<span class="hljs-string">'hello world'</span>);<br>})<br><br>app.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// 引入express</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<br><br><span class="hljs-comment">// 1. 创建app</span><br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">//  2. </span><br>app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    <span class="hljs-comment">// 1</span><br>    <span class="hljs-comment">// res.write('Hello');</span><br>    <span class="hljs-comment">// res.write('World');</span><br>    <span class="hljs-comment">// res.end()</span><br><br>    <span class="hljs-comment">// 2</span><br>    <span class="hljs-comment">// res.end('hello world');</span><br><br>    <span class="hljs-comment">// 3</span><br>    res.send(<span class="hljs-string">'hello world'</span>);<br>})<br><br>app.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'express app is runing...'</span>);<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h5 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h5><p>路由：</p><ul><li><p>请求方法</p></li><li><p>请求路径</p></li><li><p>请求处理函数</p></li></ul><p>get:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">//当你以get方法请求/的时候，执行对应的处理函数</span><br>app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    res.send(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">//当你以get方法请求/的时候，执行对应的处理函数</span><br>app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    res.send(<span class="hljs-string">'hello world'</span>);<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>post:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">//当你以post方法请求/的时候，执行对应的处理函数</span><br>app.post(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    res.send(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">//当你以post方法请求/的时候，执行对应的处理函数</span><br>app.post(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    res.send(<span class="hljs-string">'hello world'</span>);<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h5 id="Express静态服务API"><a href="#Express静态服务API" class="headerlink" title="Express静态服务API"></a>Express静态服务API</h5><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)</span><br>app.use(express.static(<span class="hljs-string">'public'</span>));<br><br>app.use(express.static(<span class="hljs-string">'files'</span>));<br><br>app.use(<span class="hljs-string">'/stataic'</span>,express.static(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)</span><br>app.use(express.static(<span class="hljs-string">'public'</span>));<br><br>app.use(express.static(<span class="hljs-string">'files'</span>));<br><br>app.use(<span class="hljs-string">'/stataic'</span>,express.static(<span class="hljs-string">'public'</span>));<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 引入express</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<br><br><span class="hljs-comment">// 创建app</span><br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">// 开放静态资源</span><br><span class="hljs-comment">// 1.当以/public/开头的时候，去./public/目录中找对应资源</span><br><span class="hljs-comment">// 访问：http://127.0.0.1:3000/public/login.html</span><br>app.use(<span class="hljs-string">'/public/'</span>,express.static(<span class="hljs-string">'./public/'</span>)); <br><br><span class="hljs-comment">// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问</span><br><span class="hljs-comment">// 访问：http://127.0.0.1:3000/login.html</span><br><span class="hljs-comment">// app.use(express.static('./public/'));   </span><br><br><span class="hljs-comment">// 3.访问：http://127.0.0.1:3000/a/login.html</span><br><span class="hljs-comment">// a相当于public的别名</span><br><span class="hljs-comment">// app.use('/a/',express.static('./public/')); </span><br><br><span class="hljs-comment">//  </span><br>app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    res.end(<span class="hljs-string">'hello world'</span>);<br>});<br><br>app.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// 引入express</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<br><br><span class="hljs-comment">// 创建app</span><br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">// 开放静态资源</span><br><span class="hljs-comment">// 1.当以/public/开头的时候，去./public/目录中找对应资源</span><br><span class="hljs-comment">// 访问：http://127.0.0.1:3000/public/login.html</span><br>app.use(<span class="hljs-string">'/public/'</span>,express.static(<span class="hljs-string">'./public/'</span>)); <br><br><span class="hljs-comment">// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问</span><br><span class="hljs-comment">// 访问：http://127.0.0.1:3000/login.html</span><br><span class="hljs-comment">// app.use(express.static('./public/'));   </span><br><br><span class="hljs-comment">// 3.访问：http://127.0.0.1:3000/a/login.html</span><br><span class="hljs-comment">// a相当于public的别名</span><br><span class="hljs-comment">// app.use('/a/',express.static('./public/')); </span><br><br><span class="hljs-comment">//  </span><br>app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    res.end(<span class="hljs-string">'hello world'</span>);<br>});<br><br>app.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'express app is runing...'</span>);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h5 id="在Express中配置使用art-templete模板引擎"><a href="#在Express中配置使用art-templete模板引擎" class="headerlink" title="在Express中配置使用art-templete模板引擎"></a>在Express中配置使用<code>art-templete</code>模板引擎</h5><ul><li><a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">art-template官方文档</a></li><li>在node中，有很多第三方模板引擎都可以使用，不是只有<code>art-template</code><ul><li>还有ejs，jade（pug），handlebars，nunjucks</li></ul></li></ul><p>安装：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs shell"><code class="language-hljs shell">npm install --save art-template<br>npm install --save express-art-template<br><br>//两个一起安装<br>npm i --save art-template express-art-template<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>配置：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.engine(<span class="hljs-string">'html'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string"><code class="language-hljs javascript">app.engine(<span class="hljs-string">'html'</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">'express-art-template'</span>));<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    <span class="hljs-comment">// express默认会去views目录找index.html</span><br>    res.render(<span class="hljs-string">'index.html'</span>,{<br>           title:<span class="hljs-string"><code class="language-hljs javascript">app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    <span class="hljs-comment">// express默认会去views目录找index.html</span><br>    res.render(<span class="hljs-string">'index.html'</span>,{<br>           title:<span class="hljs-string">'hello world'</span>     <br>    });<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>如果希望修改默认的<code>views</code>视图渲染存储目录，可以：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 第一个参数views千万不要写错</span><br>app.set(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// 第一个参数views千万不要写错</span><br>app.set(<span class="hljs-string">'views'</span>,目录路径);<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h5 id="在Express中获取表单请求数据"><a href="#在Express中获取表单请求数据" class="headerlink" title="在Express中获取表单请求数据"></a>在Express中获取表单请求数据</h5><h6 id="获取get请求数据："><a href="#获取get请求数据：" class="headerlink" title="获取get请求数据："></a>获取get请求数据：</h6><p>Express内置了一个api，可以直接通过<code>req.query</code>来获取数据</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 通过requery方法获取用户输入的数据</span><br><span class="hljs-comment">// req.query只能拿到get请求的数据</span><br> <span class="hljs-keyword"><code class="language-hljs javascript"><span class="hljs-comment">// 通过requery方法获取用户输入的数据</span><br><span class="hljs-comment">// req.query只能拿到get请求的数据</span><br> <span class="hljs-keyword">var</span> comment = req.query;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h6 id="获取post请求数据："><a href="#获取post请求数据：" class="headerlink" title="获取post请求数据："></a>获取post请求数据：</h6><p>在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包<code>body-parser</code>来获取数据。</p><p>安装：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">npm install --save body-parser;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>配置：</p><p>// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-comment">// 引包</span><br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">'body-parser'</span>)<br><br><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-comment">// 配置body-parser</span><br><span class="hljs-comment">// 只要加入这个配置，则在req请求对象上会多出来一个属性：body</span><br><span class="hljs-comment">// 也就是说可以直接通过req.body来获取表单post请求数据</span><br><span class="hljs-comment">// parse application/x-www-form-urlencoded</span><br>app.use(bodyParser.urlencoded({ <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> }))<br><br><span class="hljs-comment"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)<br><span class="hljs-comment">// 引包</span><br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">'body-parser'</span>)<br><br><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-comment">// 配置body-parser</span><br><span class="hljs-comment">// 只要加入这个配置，则在req请求对象上会多出来一个属性：body</span><br><span class="hljs-comment">// 也就是说可以直接通过req.body来获取表单post请求数据</span><br><span class="hljs-comment">// parse application/x-www-form-urlencoded</span><br>app.use(bodyParser.urlencoded({ <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> }))<br><br><span class="hljs-comment">// parse application/json</span><br>app.use(bodyParser.json())<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{<br>  res.setHeader(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'text/plain'</span>)<br>  res.write(<span class="hljs-string">'you posted:\n'</span>)<br>  <span class="hljs-comment">// 可以通过req.body来获取表单请求数据</span><br>  res.end(<span class="hljs-built_in">JSON</span>.stringify(req.body, <span class="hljs-literal">null</span>, <span class="hljs-number"><code class="language-hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>{<br>  res.setHeader(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'text/plain'</span>)<br>  res.write(<span class="hljs-string">'you posted:\n'</span>)<br>  <span class="hljs-comment">// 可以通过req.body来获取表单请求数据</span><br>  res.end(<span class="hljs-built_in">JSON</span>.stringify(req.body, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>))<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="在Express中配置使用express-session插件操作"><a href="#在Express中配置使用express-session插件操作" class="headerlink" title="在Express中配置使用express-session插件操作"></a>在Express中配置使用<code>express-session</code>插件操作</h3><blockquote><p>参考文档：<a href="https://github.com/expressjs/session" target="_blank" rel="noopener">https://github.com/expressjs/session</a></p></blockquote><p>安装：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">npm install express-session<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>配置：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">//该插件会为req请求对象添加一个成员:req.session默认是一个对象</span><br><span class="hljs-comment">//这是最简单的配置方式</span><br><span class="hljs-comment">//Session是基于Cookie实现的</span><br>app.use(session({<br>  <span class="hljs-comment">//配置加密字符串，他会在原有的基础上和字符串拼接起来去加密</span><br>  <span class="hljs-comment">//目的是为了增加安全性，防止客户端恶意伪造</span><br>  secret: <span class="hljs-string">'keyboard cat'</span>,<br>  resave: <span class="hljs-literal">false</span>,<br>  saveUninitialized: <span class="hljs-literal">true</span>,<span class="hljs-comment">//无论是否适用Session，都默认直接分配一把钥匙</span><br>  cookie: { <span class="hljs-attr">secure</span>: <span class="hljs-literal"><code class="language-hljs javascript"><span class="hljs-comment">//该插件会为req请求对象添加一个成员:req.session默认是一个对象</span><br><span class="hljs-comment">//这是最简单的配置方式</span><br><span class="hljs-comment">//Session是基于Cookie实现的</span><br>app.use(session({<br>  <span class="hljs-comment">//配置加密字符串，他会在原有的基础上和字符串拼接起来去加密</span><br>  <span class="hljs-comment">//目的是为了增加安全性，防止客户端恶意伪造</span><br>  secret: <span class="hljs-string">'keyboard cat'</span>,<br>  resave: <span class="hljs-literal">false</span>,<br>  saveUninitialized: <span class="hljs-literal">true</span>,<span class="hljs-comment">//无论是否适用Session，都默认直接分配一把钥匙</span><br>  cookie: { <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span> }<br>}))<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 读</span><br><span class="hljs-comment">//添加Session数据</span><br><span class="hljs-comment">//session就是一个对象</span><br>req.session.foo = <span class="hljs-string">'bar'</span>;<br><br><span class="hljs-comment">//写</span><br><span class="hljs-comment">//获取session数据</span><br>req.session.foo<br><br><span class="hljs-comment">//删</span><br>req.session.foo = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword"><code class="language-hljs javascript"><span class="hljs-comment">// 读</span><br><span class="hljs-comment">//添加Session数据</span><br><span class="hljs-comment">//session就是一个对象</span><br>req.session.foo = <span class="hljs-string">'bar'</span>;<br><br><span class="hljs-comment">//写</span><br><span class="hljs-comment">//获取session数据</span><br>req.session.foo<br><br><span class="hljs-comment">//删</span><br>req.session.foo = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">delete</span> req.session.foo<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>提示：</p><p>默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。</p><h3 id="利用Express实现ADUS项目"><a href="#利用Express实现ADUS项目" class="headerlink" title="利用Express实现ADUS项目"></a>利用Express实现ADUS项目</h3><h4 id="模块化思想"><a href="#模块化思想" class="headerlink" title="模块化思想"></a>模块化思想</h4><p>模块如何划分:</p><ul><li>模块职责要单一</li></ul><p>javascript模块化：</p><ul><li>Node 中的 CommonJS</li><li>浏览器中的：<ul><li>AMD    require.js</li><li>CMD     sea.js</li></ul></li><li>es6中增加了官方支持</li></ul><h4 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h4><ul><li>初始化</li><li>模板处理</li></ul><h4 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h4><table><thead><tr><th>请求方法</th><th align="left">请求路径</th><th align="left">get参数</th><th>post参数</th><th align="left">备注</th></tr></thead><tbody><tr><td>GET</td><td align="left">/students</td><td align="left"></td><td></td><td align="left">渲染首页</td></tr><tr><td>GET</td><td align="left">/students/new</td><td align="left"></td><td></td><td align="left">渲染添加学生页面</td></tr><tr><td>POST</td><td align="left">/students/new</td><td align="left"></td><td>name,age,gender,hobbies</td><td align="left">处理添加学生请求</td></tr><tr><td>GET</td><td align="left">/students/edit</td><td align="left">id</td><td></td><td align="left">渲染编辑页面</td></tr><tr><td>POST</td><td align="left">/students/edit</td><td align="left"></td><td>id,name,age,gender,hobbies</td><td align="left">处理编辑请求</td></tr><tr><td>GET</td><td align="left">/students/delete</td><td align="left">id</td><td></td><td align="left">处理删除请求</td></tr></tbody></table><h4 id="提取路由模块"><a href="#提取路由模块" class="headerlink" title="提取路由模块"></a>提取路由模块</h4><p>router.js:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * router.js路由模块</span><br><span class="hljs-comment"> * 职责：</span><br><span class="hljs-comment"> *      处理路由</span><br><span class="hljs-comment"> *      根据不同的请求方法+请求路径设置具体的请求函数</span><br><span class="hljs-comment"> * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br><span class="hljs-comment">// Express专门提供了一种更好的方式</span><br><span class="hljs-comment">// 专门用来提供路由的</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<br><span class="hljs-comment">// 1 创建一个路由容器</span><br><span class="hljs-keyword">var</span> router = express.Router();<br><span class="hljs-comment">// 2 把路由都挂载到路由容器中</span><br><br>router.get(<span class="hljs-string">'/students'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>{<br>    <span class="hljs-comment">// res.send('hello world');</span><br>    <span class="hljs-comment">// readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符</span><br>    <span class="hljs-comment">// 除了这样来转换，也可以通过data.toString（）来转换</span><br>    fs.readFile(<span class="hljs-string">'./db.json'</span>, <span class="hljs-string">'utf8'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>{<br>        <span class="hljs-keyword">if</span> (err) {<br>            <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">'Server error.'</span>)<br>        }<br>        <span class="hljs-comment">// 读取到的文件数据是string类型的数据</span><br>        <span class="hljs-comment">// console.log(data);</span><br>        <span class="hljs-comment">// 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象</span><br>        <span class="hljs-keyword">var</span> students = <span class="hljs-built_in">JSON</span>.parse(data).students;<br>        res.render(<span class="hljs-string">'index.html'</span>, {<br>            <span class="hljs-comment">// 读取文件数据</span><br>            students:students<br>        })<br>    })<br>});<br><br>router.get(<span class="hljs-string">'/students/new'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    res.render(<span class="hljs-string">'new.html'</span>)<br>});<br><br>router.get(<span class="hljs-string">'/students/edit'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    <br>});<br><br>router.post(<span class="hljs-string">'/students/edit'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    <br>});<br><br>router.get(<span class="hljs-string">'/students/delete'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    <br>});<br><br><span class="hljs-comment">// 3 把router导出</span><br><span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * router.js路由模块</span><br><span class="hljs-comment"> * 职责：</span><br><span class="hljs-comment"> *      处理路由</span><br><span class="hljs-comment"> *      根据不同的请求方法+请求路径设置具体的请求函数</span><br><span class="hljs-comment"> * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br><span class="hljs-comment">// Express专门提供了一种更好的方式</span><br><span class="hljs-comment">// 专门用来提供路由的</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<br><span class="hljs-comment">// 1 创建一个路由容器</span><br><span class="hljs-keyword">var</span> router = express.Router();<br><span class="hljs-comment">// 2 把路由都挂载到路由容器中</span><br><br>router.get(<span class="hljs-string">'/students'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>{<br>    <span class="hljs-comment">// res.send('hello world');</span><br>    <span class="hljs-comment">// readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符</span><br>    <span class="hljs-comment">// 除了这样来转换，也可以通过data.toString（）来转换</span><br>    fs.readFile(<span class="hljs-string">'./db.json'</span>, <span class="hljs-string">'utf8'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>{<br>        <span class="hljs-keyword">if</span> (err) {<br>            <span class="hljs-keyword">return</span> res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">'Server error.'</span>)<br>        }<br>        <span class="hljs-comment">// 读取到的文件数据是string类型的数据</span><br>        <span class="hljs-comment">// console.log(data);</span><br>        <span class="hljs-comment">// 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象</span><br>        <span class="hljs-keyword">var</span> students = <span class="hljs-built_in">JSON</span>.parse(data).students;<br>        res.render(<span class="hljs-string">'index.html'</span>, {<br>            <span class="hljs-comment">// 读取文件数据</span><br>            students:students<br>        })<br>    })<br>});<br><br>router.get(<span class="hljs-string">'/students/new'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    res.render(<span class="hljs-string">'new.html'</span>)<br>});<br><br>router.get(<span class="hljs-string">'/students/edit'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    <br>});<br><br>router.post(<span class="hljs-string">'/students/edit'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    <br>});<br><br>router.get(<span class="hljs-string">'/students/delete'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    <br>});<br><br><span class="hljs-comment">// 3 把router导出</span><br><span class="hljs-built_in">module</span>.exports = router;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>app.js:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./router'</span>);<br><br><span class="hljs-comment">// router(app);</span><br><span class="hljs-comment">// 把路由容器挂载到app服务中</span><br><span class="hljs-comment"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./router'</span>);<br><br><span class="hljs-comment">// router(app);</span><br><span class="hljs-comment">// 把路由容器挂载到app服务中</span><br><span class="hljs-comment">// 挂载路由</span><br>app.use(router);<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h4 id="设计操作数据的API文件模块"><a href="#设计操作数据的API文件模块" class="headerlink" title="设计操作数据的API文件模块"></a>设计操作数据的API文件模块</h4><p>es6中的find和findIndex：</p><p>find接受一个方法作为参数，方法内部返回一个条件</p><p>find会便利所有的元素，执行你给定的带有条件返回值的函数</p><p>符合该条件的元素会作为find方法的返回值</p><p>如果遍历结束还没有符合该条件的元素，则返回undefined<img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200313103810731.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200313103810731"></p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * student.js</span><br><span class="hljs-comment"> * 数据操作文件模块</span><br><span class="hljs-comment"> * 职责：操作文件中的数据，只处理数据，不关心业务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 获取所有学生列表</span><br><span class="hljs-comment">  * return []</span><br><span class="hljs-comment">  */</span><br>exports.find = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <br>}<br><br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 获取添加保存学生</span><br><span class="hljs-comment">  */</span><br>exports.save = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新学生</span><br><span class="hljs-comment"> */</span><br>exports.update = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <br>}<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除学生</span><br><span class="hljs-comment"> */</span><br>exports.delete = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><code class="language-hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * student.js</span><br><span class="hljs-comment"> * 数据操作文件模块</span><br><span class="hljs-comment"> * 职责：操作文件中的数据，只处理数据，不关心业务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 获取所有学生列表</span><br><span class="hljs-comment">  * return []</span><br><span class="hljs-comment">  */</span><br>exports.find = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <br>}<br><br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 获取添加保存学生</span><br><span class="hljs-comment">  */</span><br>exports.save = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <br>}<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 更新学生</span><br><span class="hljs-comment"> */</span><br>exports.update = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <br>}<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除学生</span><br><span class="hljs-comment"> */</span><br>exports.delete = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li><p>处理模板</p></li><li><p>配置静态开放资源</p></li><li><p>配置模板引擎</p></li><li><p>简单的路由，/studens渲染静态页出来</p></li><li><p>路由设计</p></li><li><p>提取路由模块</p></li><li><p>由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装Student.js’</p></li><li><p>先写好student.js文件结构</p><ul><li>查询所有学生列别哦的API</li><li>findById</li><li>save</li><li>updateById</li><li>deleteById</li></ul></li><li><p>实现具体功能</p><ul><li>通过路由收到请求</li><li>接受请求中的参数（get，post）<ul><li>req.query</li><li>req.body</li></ul></li><li>调用数据操作API处理数据</li><li>根据操作结果给客户端发送请求</li></ul></li><li><p>业务功能顺序</p><ul><li>列表</li><li>添加</li><li>编辑</li><li>删除</li></ul></li></ul><h4 id="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"><a href="#子模板和模板的继承（模板引擎高级语法）【include，extend，block】" class="headerlink" title="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"></a>子模板和模板的继承（模板引擎高级语法）【include，extend，block】</h4><p>注意:</p><p>模板页：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">"zh"</span>&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">"UTF-8"</span>&gt;<br>&lt;meta name=<span class="hljs-string">"viewport"</span> content=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;<br>&lt;meta http-equiv=<span class="hljs-string">"X-UA-Compatible"</span> content=<span class="hljs-string">"ie=edge"</span>&gt;<br>&lt;title&gt;模板页&lt;<span class="hljs-regexp">/title&gt;</span><br><span class="hljs-regexp">&lt;link rel="stylesheet" href="/</span>node_modules/bootstrap/dist/css/bootstrap.css<span class="hljs-string">"/&gt;</span><br><span class="hljs-string">{{ block 'head' }}{{ /block }}</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;!-- 通过include导入公共部分 --&gt;</span><br><span class="hljs-string">{{include './header.html'}}</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;!-- 留一个位置 让别的内容去填充 --&gt;</span><br><span class="hljs-string">{{ block  'content' }}</span><br><span class="hljs-string">&lt;h1&gt;默认内容&lt;/h1&gt;</span><br><span class="hljs-string">{{ /block }}</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;!-- 通过include导入公共部分 --&gt;</span><br><span class="hljs-string">{{include './footer.html'}}</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;!-- 公共样式 --&gt;</span><br><span class="hljs-string">&lt;script src="</span>/node_modules/jquery/dist/jquery.js<span class="hljs-string">" &gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script src="</span>/node_modules/bootstrap/dist/js/bootstrap.js<span class="hljs-string">" &gt;&lt;/script&gt;</span><br><span class="hljs-string">{{ block 'script' }}{{ /block }}</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string"><code class="language-hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">"zh"</span>&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">"UTF-8"</span>&gt;<br>&lt;meta name=<span class="hljs-string">"viewport"</span> content=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;<br>&lt;meta http-equiv=<span class="hljs-string">"X-UA-Compatible"</span> content=<span class="hljs-string">"ie=edge"</span>&gt;<br>&lt;title&gt;模板页&lt;<span class="hljs-regexp">/title&gt;</span><br><span class="hljs-regexp">&lt;link rel="stylesheet" href="/</span>node_modules/bootstrap/dist/css/bootstrap.css<span class="hljs-string">"/&gt;</span><br><span class="hljs-string">{{ block 'head' }}{{ /block }}</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;!-- 通过include导入公共部分 --&gt;</span><br><span class="hljs-string">{{include './header.html'}}</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;!-- 留一个位置 让别的内容去填充 --&gt;</span><br><span class="hljs-string">{{ block  'content' }}</span><br><span class="hljs-string">&lt;h1&gt;默认内容&lt;/h1&gt;</span><br><span class="hljs-string">{{ /block }}</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;!-- 通过include导入公共部分 --&gt;</span><br><span class="hljs-string">{{include './footer.html'}}</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;!-- 公共样式 --&gt;</span><br><span class="hljs-string">&lt;script src="</span>/node_modules/jquery/dist/jquery.js<span class="hljs-string">" &gt;&lt;/script&gt;</span><br><span class="hljs-string">&lt;script src="</span>/node_modules/bootstrap/dist/js/bootstrap.js<span class="hljs-string">" &gt;&lt;/script&gt;</span><br><span class="hljs-string">{{ block 'script' }}{{ /block }}</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string"></html></span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>模板的继承：</p><p>​    header页面：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">&lt;div id=<span class="hljs-string">""</span>&gt;<br>&lt;h1&gt;公共的头部&lt;<span class="hljs-regexp">/h1&gt;</span><br><span class="hljs-regexp"><code class="language-hljs javascript">&lt;div id=<span class="hljs-string">""</span>&gt;<br>&lt;h1&gt;公共的头部&lt;<span class="hljs-regexp">/h1&gt;</span><br><span class="hljs-regexp"></</span>div><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>​    footer页面：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">&lt;div id=<span class="hljs-string">""</span>&gt;<br>&lt;h1&gt;公共的底部&lt;<span class="hljs-regexp">/h1&gt;</span><br><span class="hljs-regexp"><code class="language-hljs javascript">&lt;div id=<span class="hljs-string">""</span>&gt;<br>&lt;h1&gt;公共的底部&lt;<span class="hljs-regexp">/h1&gt;</span><br><span class="hljs-regexp"></</span>div><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>模板页的使用：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">&lt;!-- 继承(extend:延伸，扩展)模板也layout.html --&gt;<br>&lt;!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --&gt;<br>{{extend <span class="hljs-string">'./layout.html'</span>}}<br><br>&lt;!-- 向模板页面填充新的数据 --&gt;<br>&lt;!-- 填充后就会替换掉layout页面content中的数据 --&gt;<br>&lt;!-- style样式方面的内容 --&gt;<br>{{ block <span class="hljs-string">'head'</span> }}<br>&lt;style type=<span class="hljs-string">"text/css"</span>&gt;<br>body{<br>background-color: skyblue;<br>}<br>&lt;<span class="hljs-regexp">/style&gt;</span><br><span class="hljs-regexp">{{ /</span>block }}<br>{{ block <span class="hljs-string">'content'</span> }}<br>&lt;div id=<span class="hljs-string">""</span>&gt;<br>&lt;h1&gt;Index页面的内容&lt;<span class="hljs-regexp">/h1&gt;</span><br><span class="hljs-regexp">&lt;/</span>div&gt;<br>{{ /block }}<br>&lt;!-- js部分的内容 --&gt;<br>{{ block <span class="hljs-string">'script'</span> }}<br>&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;<br><br>&lt;<span class="hljs-regexp">/script&gt;</span><br><span class="hljs-regexp"><code class="language-hljs javascript">&lt;!-- 继承(extend:延伸，扩展)模板也layout.html --&gt;<br>&lt;!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --&gt;<br>{{extend <span class="hljs-string">'./layout.html'</span>}}<br><br>&lt;!-- 向模板页面填充新的数据 --&gt;<br>&lt;!-- 填充后就会替换掉layout页面content中的数据 --&gt;<br>&lt;!-- style样式方面的内容 --&gt;<br>{{ block <span class="hljs-string">'head'</span> }}<br>&lt;style type=<span class="hljs-string">"text/css"</span>&gt;<br>body{<br>background-color: skyblue;<br>}<br>&lt;<span class="hljs-regexp">/style&gt;</span><br><span class="hljs-regexp">{{ /</span>block }}<br>{{ block <span class="hljs-string">'content'</span> }}<br>&lt;div id=<span class="hljs-string">""</span>&gt;<br>&lt;h1&gt;Index页面的内容&lt;<span class="hljs-regexp">/h1&gt;</span><br><span class="hljs-regexp">&lt;/</span>div&gt;<br>{{ /block }}<br>&lt;!-- js部分的内容 --&gt;<br>{{ block <span class="hljs-string">'script'</span> }}<br>&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;<br><br>&lt;<span class="hljs-regexp">/script&gt;</span><br><span class="hljs-regexp">{{ /</span>block }}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>最终的显示效果：</p><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200316134759517.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200316134759517"></p><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="关系型和非关系型数据库"><a href="#关系型和非关系型数据库" class="headerlink" title="关系型和非关系型数据库"></a>关系型和非关系型数据库</h2><h3 id="关系型数据库（表就是关系，或者说表与表之间存在关系）。"><a href="#关系型数据库（表就是关系，或者说表与表之间存在关系）。" class="headerlink" title="关系型数据库（表就是关系，或者说表与表之间存在关系）。"></a>关系型数据库（表就是关系，或者说表与表之间存在关系）。</h3><ul><li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li><li>所有的关系型数据库在操作之前都需要设计表结构</li><li>而且数据表还支持约束<ul><li>唯一的</li><li>主键</li><li>默认值</li><li>非空</li></ul></li></ul><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ul><li>非关系型数据库非常的灵活</li><li>有的关系型数据库就是key-value对儿</li><li>但MongDB是长得最像关系型数据库的非关系型数据库<ul><li>数据库 -》 数据库</li><li>数据表 -》 集合（数组）</li><li>表记录 -》文档对象</li></ul></li></ul><p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">{<br>    qq:{<br>       user:[<br>           {},{},{}...<br>       ]<br>    }<br>}<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><ul><li>也就是说你可以任意的往里面存数据，没有结构性这么一说</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>下载</p><ul><li>下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></li></ul></li><li><p>安装</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">npm i mongoose<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure></li><li><p>配置环境变量</p></li><li><p>最后输入<code>mongod --version</code>测试是否安装成功</p></li></ul><h2 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h2><p>启动：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs shell"><span class="hljs-meta">#</span><span class="bash"> mongodb 默认使用执行mongod 命令所处盼复根目录下的/data/db作为自己的数据存储目录</span><br><span class="hljs-meta">#</span><span class="bash"><code class="language-hljs shell"><span class="hljs-meta">#</span><span class="bash"> mongodb 默认使用执行mongod 命令所处盼复根目录下的/data/db作为自己的数据存储目录</span><br><span class="hljs-meta">#</span><span class="bash"> 所以在第一次执行该命令之前先自己手动新建一个 /data/db</span><br>mongod<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>如果想要修改默认的数据存储目录，可以：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">mongod --dbpath = 数据存储目录路径<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>停止：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">在开启服务的控制台，直接Ctrl+C;<br>或者直接关闭开启服务的控制台。<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200314101047100.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200314101047100"></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript"># 该命令默认连接本机的 MongoDB 服务<br>mongo<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>退出：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript"># 在连接状态输入 exit 退出连接<br>exit<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200314100821112.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200314100821112"></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><code>show dbs</code><ul><li>查看数据库列表(数据库中的所有数据库)</li></ul></li><li><code>db</code><ul><li>查看当前连接的数据库</li></ul></li><li><code>use 数据库名称</code><ul><li>切换到指定的数据库，（如果没有会新建）</li></ul></li><li><code>show collections</code><ul><li>查看当前目录下的所有数据表</li></ul></li><li><code>db.表名.find()</code><ul><li>查看表中的详细信息</li></ul></li></ul><h2 id="在Node中如何操作MongoDB数据库"><a href="#在Node中如何操作MongoDB数据库" class="headerlink" title="在Node中如何操作MongoDB数据库"></a>在Node中如何操作MongoDB数据库</h2><h3 id="使用官方的MongoDB包来操作"><a href="#使用官方的MongoDB包来操作" class="headerlink" title="使用官方的MongoDB包来操作"></a>使用官方的<code>MongoDB</code>包来操作</h3><blockquote><p>​    <a href="http://mongodb.github.io/node-mongodb-native/" target="_blank" rel="noopener">http://mongodb.github.io/node-mongodb-native/</a></p></blockquote><h3 id="使用第三方包mongoose来操作MongoDB数据库"><a href="#使用第三方包mongoose来操作MongoDB数据库" class="headerlink" title="使用第三方包mongoose来操作MongoDB数据库"></a>使用第三方包<code>mongoose</code>来操作MongoDB数据库</h3><p>​    第三方包：<code>mongoose</code>基于MongoDB官方的<code>mongodb</code>包再一次做了封装，名字叫<code>mongoose</code>，是WordPress项目团队开发的。</p><blockquote><p>​    <a href="https://mongoosejs.com/" target="_blank" rel="noopener">https://mongoosejs.com/</a></p></blockquote><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200314105632745.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200314105632745"></p><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200314105717993.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200314105717993"></p><h2 id="学习指南（步骤）"><a href="#学习指南（步骤）" class="headerlink" title="学习指南（步骤）"></a>学习指南（步骤）</h2><p>官方学习文档：<a href="https://mongoosejs.com/docs/index.html" target="_blank" rel="noopener">https://mongoosejs.com/docs/index.html</a></p><h3 id="设计Scheme-发布Model-创建表"><a href="#设计Scheme-发布Model-创建表" class="headerlink" title="设计Scheme 发布Model (创建表)"></a>设计Scheme 发布Model (创建表)</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 1.引包</span><br><span class="hljs-comment">// 注意：按照后才能require使用</span><br><span class="hljs-keyword">var</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mongoose'</span>);<br><br><span class="hljs-comment">// 拿到schema图表</span><br><span class="hljs-keyword">var</span> Schema = mongoose.Schema;<br><br><span class="hljs-comment">// 2.连接数据库</span><br><span class="hljs-comment">// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库</span><br>mongoose.connect(<span class="hljs-string">'mongodb://localhost/test'</span>);<br><br><span class="hljs-comment">// 3.设计集合结构（表结构）</span><br><span class="hljs-comment">// 用户表</span><br><span class="hljs-keyword">var</span> userSchema = <span class="hljs-keyword">new</span> Schema({<br>username: { <span class="hljs-comment">//姓名</span><br>type: <span class="hljs-built_in">String</span>,<br><span class="hljs-built_in">require</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">//添加约束，保证数据的完整性，让数据按规矩统一</span><br>},<br>password: {<br>type: <span class="hljs-built_in">String</span>,<br><span class="hljs-built_in">require</span>: <span class="hljs-literal">true</span><br>},<br>email: {<br>type: <span class="hljs-built_in">String</span><br>}<br>});<br><br><span class="hljs-comment">// 4.将文档结构发布为模型</span><br><span class="hljs-comment">// mongoose.model方法就是用来将一个架构发布为 model</span><br><span class="hljs-comment">// 第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称</span><br><span class="hljs-comment">// mongoose 会自动将大写名词的字符串生成 小写复数 的集合名称</span><br><span class="hljs-comment">// 例如 这里会变成users集合名称</span><br><span class="hljs-comment">// 第二个参数：架构</span><br><span class="hljs-comment">// 返回值：模型构造函数</span><br><span class="hljs-keyword">var</span> User = mongoose.model(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// 1.引包</span><br><span class="hljs-comment">// 注意：按照后才能require使用</span><br><span class="hljs-keyword">var</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mongoose'</span>);<br><br><span class="hljs-comment">// 拿到schema图表</span><br><span class="hljs-keyword">var</span> Schema = mongoose.Schema;<br><br><span class="hljs-comment">// 2.连接数据库</span><br><span class="hljs-comment">// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库</span><br>mongoose.connect(<span class="hljs-string">'mongodb://localhost/test'</span>);<br><br><span class="hljs-comment">// 3.设计集合结构（表结构）</span><br><span class="hljs-comment">// 用户表</span><br><span class="hljs-keyword">var</span> userSchema = <span class="hljs-keyword">new</span> Schema({<br>username: { <span class="hljs-comment">//姓名</span><br>type: <span class="hljs-built_in">String</span>,<br><span class="hljs-built_in">require</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">//添加约束，保证数据的完整性，让数据按规矩统一</span><br>},<br>password: {<br>type: <span class="hljs-built_in">String</span>,<br><span class="hljs-built_in">require</span>: <span class="hljs-literal">true</span><br>},<br>email: {<br>type: <span class="hljs-built_in">String</span><br>}<br>});<br><br><span class="hljs-comment">// 4.将文档结构发布为模型</span><br><span class="hljs-comment">// mongoose.model方法就是用来将一个架构发布为 model</span><br><span class="hljs-comment">// 第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称</span><br><span class="hljs-comment">// mongoose 会自动将大写名词的字符串生成 小写复数 的集合名称</span><br><span class="hljs-comment">// 例如 这里会变成users集合名称</span><br><span class="hljs-comment">// 第二个参数：架构</span><br><span class="hljs-comment">// 返回值：模型构造函数</span><br><span class="hljs-keyword">var</span> User = mongoose.model(<span class="hljs-string">'User'</span>, userSchema);<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="添加数据（增）"><a href="#添加数据（增）" class="headerlink" title="添加数据（增）"></a>添加数据（增）</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 5.通过模型构造函数对User中的数据进行操作</span><br><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> User({<br>username: <span class="hljs-string">'admin'</span>,<br>password: <span class="hljs-string">'123456'</span>,<br>email: <span class="hljs-string">'xiaochen@qq.com'</span><br>});<br><br>user.save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'保存失败'</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'保存成功'</span>);<br><span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-comment">// 5.通过模型构造函数对User中的数据进行操作</span><br><span class="hljs-keyword">var</span> user = <span class="hljs-keyword">new</span> User({<br>username: <span class="hljs-string">'admin'</span>,<br>password: <span class="hljs-string">'123456'</span>,<br>email: <span class="hljs-string">'xiaochen@qq.com'</span><br>});<br><br>user.save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'保存失败'</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'保存成功'</span>);<br><span class="hljs-built_in">console</span>.log(ret);<br>}<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="删除（删）"><a href="#删除（删）" class="headerlink" title="删除（删）"></a>删除（删）</h3><p>根据条件删除所有：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">User.remove({<br>username: <span class="hljs-string">'xiaoxiao'</span><br>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'删除失败'</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'删除成功'</span>);<br><span class="hljs-built_in"><code class="language-hljs javascript">User.remove({<br>username: <span class="hljs-string">'xiaoxiao'</span><br>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'删除失败'</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'删除成功'</span>);<br><span class="hljs-built_in">console</span>.log(ret);<br>}<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>根据条件删除一个：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">Model.findOneAndRemove(conditions,[options],[callback]);<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>根据id删除一个：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">User.findByIdAndRemove(id,[options],[callback]);<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="更新（改）"><a href="#更新（改）" class="headerlink" title="更新（改）"></a>更新（改）</h3><p>更新所有：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">User.remove(conditions,doc,[options],[callback]);<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>根据指定条件更新一个：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">User.FindOneAndUpdate([conditions],[update],[options],[callback]);<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>根据id更新一个：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 更新根据id来修改表数据</span><br>User.findByIdAndUpdate(<span class="hljs-string">'5e6c5264fada77438c45dfcd'</span>, {<br>username: <span class="hljs-string">'junjun'</span><br>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'更新失败'</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// 更新根据id来修改表数据</span><br>User.findByIdAndUpdate(<span class="hljs-string">'5e6c5264fada77438c45dfcd'</span>, {<br>username: <span class="hljs-string">'junjun'</span><br>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'更新失败'</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'更新成功'</span>);<br>}<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="查询（查）"><a href="#查询（查）" class="headerlink" title="查询（查）"></a>查询（查）</h3><p>查询所有：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 查询所有</span><br>User.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,ret</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'查询失败'</span>);<br>}<span class="hljs-keyword">else</span>{<br><span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-comment">// 查询所有</span><br>User.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,ret</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'查询失败'</span>);<br>}<span class="hljs-keyword">else</span>{<br><span class="hljs-built_in">console</span>.log(ret);<br>}<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>条件查询所有：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 根据条件查询</span><br>User.find({ <span class="hljs-attr">username</span>:<span class="hljs-string">'xiaoxiao'</span> },<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,ret</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'查询失败'</span>);<br>}<span class="hljs-keyword">else</span>{<br><span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-comment">// 根据条件查询</span><br>User.find({ <span class="hljs-attr">username</span>:<span class="hljs-string">'xiaoxiao'</span> },<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,ret</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'查询失败'</span>);<br>}<span class="hljs-keyword">else</span>{<br><span class="hljs-built_in">console</span>.log(ret);<br>}<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>条件查询单个：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 按照条件查询单个，查询出来的数据是一个对象（{}）</span><br><span class="hljs-comment">// 没有条件查询使用findOne方法，查询的是表中的第一条数据</span><br>User.findOne({<br>username: <span class="hljs-string">'xiaoxiao'</span><br>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'查询失败'</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-comment">// 按照条件查询单个，查询出来的数据是一个对象（{}）</span><br><span class="hljs-comment">// 没有条件查询使用findOne方法，查询的是表中的第一条数据</span><br>User.findOne({<br>username: <span class="hljs-string">'xiaoxiao'</span><br>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, ret</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'查询失败'</span>);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-built_in">console</span>.log(ret);<br>}<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h1 id="使用Node操作MySQL数据库"><a href="#使用Node操作MySQL数据库" class="headerlink" title="使用Node操作MySQL数据库"></a>使用Node操作MySQL数据库</h1><p>文档：<a href="https://www.npmjs.com/package/mysql" target="_blank" rel="noopener">https://www.npmjs.com/package/mysql</a></p><p>安装：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs shell"><code class="language-hljs shell">npm install --save  mysql<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 引入mysql包</span><br><span class="hljs-keyword">var</span> mysql      = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mysql'</span>);<br><br><span class="hljs-comment">// 创建连接</span><br><span class="hljs-keyword">var</span> connection = mysql.createConnection({<br>  host     : <span class="hljs-string">'localhost'</span>,<span class="hljs-comment">//本机</span><br>  user     : <span class="hljs-string">'me'</span>,<span class="hljs-comment">//账号root</span><br>  password : <span class="hljs-string">'secret'</span>,<span class="hljs-comment">//密码12345</span><br>  database : <span class="hljs-string">'my_db'</span><span class="hljs-comment">//数据库名</span><br>});<br> <br><span class="hljs-comment">// 连接数据库（打开冰箱门）</span><br>connection.connect();<br> <br><span class="hljs-comment">//执行数据操作（把大象放到冰箱）</span><br>connection.query(<span class="hljs-string">'SELECT * FROM `users` '</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results, fields</span>) </span>{<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<span class="hljs-comment">//抛出异常阻止代码往下执行</span><br>  <span class="hljs-comment">// 没有异常打印输出结果</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'The solution is: '</span>,results);<br>});<br><br><span class="hljs-comment"><code class="language-hljs javascript"><span class="hljs-comment">// 引入mysql包</span><br><span class="hljs-keyword">var</span> mysql      = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mysql'</span>);<br><br><span class="hljs-comment">// 创建连接</span><br><span class="hljs-keyword">var</span> connection = mysql.createConnection({<br>  host     : <span class="hljs-string">'localhost'</span>,<span class="hljs-comment">//本机</span><br>  user     : <span class="hljs-string">'me'</span>,<span class="hljs-comment">//账号root</span><br>  password : <span class="hljs-string">'secret'</span>,<span class="hljs-comment">//密码12345</span><br>  database : <span class="hljs-string">'my_db'</span><span class="hljs-comment">//数据库名</span><br>});<br> <br><span class="hljs-comment">// 连接数据库（打开冰箱门）</span><br>connection.connect();<br> <br><span class="hljs-comment">//执行数据操作（把大象放到冰箱）</span><br>connection.query(<span class="hljs-string">'SELECT * FROM `users` '</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results, fields</span>) </span>{<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<span class="hljs-comment">//抛出异常阻止代码往下执行</span><br>  <span class="hljs-comment">// 没有异常打印输出结果</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'The solution is: '</span>,results);<br>});<br><br><span class="hljs-comment">//关闭连接（关闭冰箱门）</span><br>connection.end();<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>不成立的情况下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x,y</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">var</span> ret = x + y;<br>        <span class="hljs-keyword">return</span> ret;<br>    },<span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>    <span class="hljs-comment">//到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined</span><br>}<br><br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));<br><span class="hljs-comment"><code class="language-hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x,y</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">var</span> ret = x + y;<br>        <span class="hljs-keyword">return</span> ret;<br>    },<span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>    <span class="hljs-comment">//到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined</span><br>}<br><br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>));<br><span class="hljs-comment">// 结果是 1 3 undefined 4</span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200313085008929.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200313085008929"></p><p>使用回调函数解决：</p><p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> ret;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x,y,callback</span>)</span>{<br>    <span class="hljs-comment">// callback就是回调函数</span><br>    <span class="hljs-comment">// var x = 10;</span><br>    <span class="hljs-comment">// var y = 20;</span><br>    <span class="hljs-comment">// var callback = function(ret){console.log(ret);}</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">var</span> ret = x + y;<br>        callback(ret);<br>    },<span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>}<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>{<br>    <span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> ret;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x,y,callback</span>)</span>{<br>    <span class="hljs-comment">// callback就是回调函数</span><br>    <span class="hljs-comment">// var x = 10;</span><br>    <span class="hljs-comment">// var y = 20;</span><br>    <span class="hljs-comment">// var callback = function(ret){console.log(ret);}</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">var</span> ret = x + y;<br>        callback(ret);<br>    },<span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<br>}<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ret</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(ret);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><img src="C:\Users\A\AppData\Roaming\Typora\typora-user-images\image-20200313084746701.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200313084746701" style="zoom:100%;"><p>注意：</p><p>​    凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p><p>​    这种情况必须通过   回调函数 (异步API都会伴随着一个回调函数)</p><p>ajax:</p><p>基于原生XMLHttpRequest封装get方法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> oReq = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><span class="hljs-comment">// 当请求加载成功要调用指定的函数</span><br>oReq.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(oReq.responseText);<br>}<br>oReq.open(<span class="hljs-string">"GET"</span>, <span class="hljs-string">"请求路径"</span>,<span class="hljs-literal"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> oReq = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><span class="hljs-comment">// 当请求加载成功要调用指定的函数</span><br>oReq.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(oReq.responseText);<br>}<br>oReq.open(<span class="hljs-string">"GET"</span>, <span class="hljs-string">"请求路径"</span>,<span class="hljs-literal">true</span>);<br>oReq.send();<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params">url,callback</span>)</span>{<br>    <span class="hljs-keyword">var</span> oReq = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    <span class="hljs-comment">// 当请求加载成功要调用指定的函数</span><br>    oReq.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-comment">//console.log(oReq.responseText);</span><br>        callback(oReq.responseText);<br>    }<br>    oReq.open(<span class="hljs-string">"GET"</span>, url,<span class="hljs-literal">true</span>);<br>    oReq.send();<br>}<br><span class="hljs-keyword">get</span>('data.json',function(data){<br>    <span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params">url,callback</span>)</span>{<br>    <span class="hljs-keyword">var</span> oReq = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    <span class="hljs-comment">// 当请求加载成功要调用指定的函数</span><br>    oReq.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-comment">//console.log(oReq.responseText);</span><br>        callback(oReq.responseText);<br>    }<br>    oReq.open(<span class="hljs-string">"GET"</span>, url,<span class="hljs-literal">true</span>);<br>    oReq.send();<br>}<br><span class="hljs-keyword">get</span>('data.json',function(data){<br>    <span class="hljs-built_in">console</span>.log(data);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>callback  hell（回调地狱）:</p><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200314143410972.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200314143410972"></p><p>文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br>fs.readFile(<span class="hljs-string">'./data/a.text'</span>,<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br><span class="hljs-comment">// 2 抛出异常</span><br><span class="hljs-comment">// 阻止程序的执行</span><br><span class="hljs-comment">// 把错误信息打印到控制台</span><br><span class="hljs-keyword">throw</span> err;<br>}<br><span class="hljs-built_in">console</span>.log(data);<br>});<br><br>fs.readFile(<span class="hljs-string">'./data/b.text'</span>,<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br><span class="hljs-comment">// 2 抛出异常</span><br><span class="hljs-comment">// 阻止程序的执行</span><br><span class="hljs-comment">// 把错误信息打印到控制台</span><br><span class="hljs-keyword">throw</span> err;<br>}<br><span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br>fs.readFile(<span class="hljs-string">'./data/a.text'</span>,<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br><span class="hljs-comment">// 2 抛出异常</span><br><span class="hljs-comment">// 阻止程序的执行</span><br><span class="hljs-comment">// 把错误信息打印到控制台</span><br><span class="hljs-keyword">throw</span> err;<br>}<br><span class="hljs-built_in">console</span>.log(data);<br>});<br><br>fs.readFile(<span class="hljs-string">'./data/b.text'</span>,<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br><span class="hljs-comment">// 2 抛出异常</span><br><span class="hljs-comment">// 阻止程序的执行</span><br><span class="hljs-comment">// 把错误信息打印到控制台</span><br><span class="hljs-keyword">throw</span> err;<br>}<br><span class="hljs-built_in">console</span>.log(data);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>通过回调嵌套的方式来保证顺序：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br>fs.readFile(<span class="hljs-string">'./data/a.text'</span>,<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br><span class="hljs-comment">// 2 抛出异常</span><br><span class="hljs-comment">// 阻止程序的执行</span><br><span class="hljs-comment">// 把错误信息打印到控制台</span><br><span class="hljs-keyword">throw</span> err;<br>}<br><span class="hljs-built_in">console</span>.log(data);<br>fs.readFile(<span class="hljs-string">'./data/b.text'</span>,<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br><span class="hljs-comment">// 2 抛出异常</span><br><span class="hljs-comment">// 阻止程序的执行</span><br><span class="hljs-comment">// 把错误信息打印到控制台</span><br><span class="hljs-keyword">throw</span> err;<br>}<br><span class="hljs-built_in">console</span>.log(data);<br>fs.readFile(<span class="hljs-string">'./data/a.text'</span>,<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br><span class="hljs-comment">// 2 抛出异常</span><br><span class="hljs-comment">// 阻止程序的执行</span><br><span class="hljs-comment">// 把错误信息打印到控制台</span><br><span class="hljs-keyword">throw</span> err;<br>}<br><span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br>fs.readFile(<span class="hljs-string">'./data/a.text'</span>,<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br><span class="hljs-comment">// 2 抛出异常</span><br><span class="hljs-comment">// 阻止程序的执行</span><br><span class="hljs-comment">// 把错误信息打印到控制台</span><br><span class="hljs-keyword">throw</span> err;<br>}<br><span class="hljs-built_in">console</span>.log(data);<br>fs.readFile(<span class="hljs-string">'./data/b.text'</span>,<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br><span class="hljs-comment">// 2 抛出异常</span><br><span class="hljs-comment">// 阻止程序的执行</span><br><span class="hljs-comment">// 把错误信息打印到控制台</span><br><span class="hljs-keyword">throw</span> err;<br>}<br><span class="hljs-built_in">console</span>.log(data);<br>fs.readFile(<span class="hljs-string">'./data/a.text'</span>,<span class="hljs-string">'utf8'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,data</span>)</span>{<br><span class="hljs-keyword">if</span>(err){<br><span class="hljs-comment">// 1 读取失败直接打印输出读取失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取失败'</span>);<br><span class="hljs-comment">// 2 抛出异常</span><br><span class="hljs-comment">// 阻止程序的执行</span><br><span class="hljs-comment">// 把错误信息打印到控制台</span><br><span class="hljs-keyword">throw</span> err;<br>}<br><span class="hljs-built_in">console</span>.log(data);<br>});<br>});<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200314144807008.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200314144807008">)为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript6新增了一个API:<code>Promise</code>。<img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200314150050839.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200314150050839"></p><ul><li>Promise：承诺，保证</li><li>Promise本身不是异步的，但往往都是内部封装一个异步任务</li></ul><p>基本语法：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 在EcmaScript 6中新增了一个API Promise</span><br><span class="hljs-comment">// Promise 是一个构造函数</span><br><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><span class="hljs-comment">// 1 创建Promise容器resolve:解决   reject：失败</span><br><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{<br>fs.readFile(<span class="hljs-string">'./a.text'</span>, <span class="hljs-string">'utf8'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br><span class="hljs-comment">// console.log(err);</span><br><span class="hljs-comment">// 把容器的Pending状态变为rejected</span><br>reject(err);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-comment">// console.log(data);</span><br><span class="hljs-comment">// 把容器的Pending状态变为resolve</span><br>resolve(<span class="hljs-number">1234</span>);<br>}<br>});<br>});<br><br><span class="hljs-comment">// 当p1成功了，然后就（then）做指定的操作</span><br><span class="hljs-comment">// then方法接收的function就是容器中的resolve函数</span><br>p1<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{<br><span class="hljs-built_in">console</span>.log(data);<br>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// 在EcmaScript 6中新增了一个API Promise</span><br><span class="hljs-comment">// Promise 是一个构造函数</span><br><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><span class="hljs-comment">// 1 创建Promise容器resolve:解决   reject：失败</span><br><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{<br>fs.readFile(<span class="hljs-string">'./a.text'</span>, <span class="hljs-string">'utf8'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br><span class="hljs-comment">// console.log(err);</span><br><span class="hljs-comment">// 把容器的Pending状态变为rejected</span><br>reject(err);<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-comment">// console.log(data);</span><br><span class="hljs-comment">// 把容器的Pending状态变为resolve</span><br>resolve(<span class="hljs-number">1234</span>);<br>}<br>});<br>});<br><br><span class="hljs-comment">// 当p1成功了，然后就（then）做指定的操作</span><br><span class="hljs-comment">// then方法接收的function就是容器中的resolve函数</span><br>p1<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{<br><span class="hljs-built_in">console</span>.log(data);<br>}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'读取文件失败了'</span>, err);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200315100611620.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200315100611620"></p><p>链式循环：<img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200315125559136.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200315125559136"></p><p>封装Promise的<code>readFile</code>：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pReadFile</span>(<span class="hljs-params">filePath</span>) </span>{<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{<br>fs.readFile(filePath, <span class="hljs-string">'utf8'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br>reject(err);<br>} <span class="hljs-keyword">else</span> {<br>resolve(data);<br>}<br>});<br>});<br>}<br><br>pReadFile(<span class="hljs-string">'./a.txt'</span>)<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{<br><span class="hljs-built_in">console</span>.log(data);<br><span class="hljs-keyword">return</span> pReadFile(<span class="hljs-string">'./b.txt'</span>);<br>})<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{<br><span class="hljs-built_in">console</span>.log(data);<br><span class="hljs-keyword">return</span> pReadFile(<span class="hljs-string">'./a.txt'</span>);<br>})<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{<br><span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pReadFile</span>(<span class="hljs-params">filePath</span>) </span>{<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{<br>fs.readFile(filePath, <span class="hljs-string">'utf8'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>{<br><span class="hljs-keyword">if</span> (err) {<br>reject(err);<br>} <span class="hljs-keyword">else</span> {<br>resolve(data);<br>}<br>});<br>});<br>}<br><br>pReadFile(<span class="hljs-string">'./a.txt'</span>)<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{<br><span class="hljs-built_in">console</span>.log(data);<br><span class="hljs-keyword">return</span> pReadFile(<span class="hljs-string">'./b.txt'</span>);<br>})<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{<br><span class="hljs-built_in">console</span>.log(data);<br><span class="hljs-keyword">return</span> pReadFile(<span class="hljs-string">'./a.txt'</span>);<br>})<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{<br><span class="hljs-built_in">console</span>.log(data);<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>mongoose所有的API都支持Promise：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// 查询所有</span><br>User.find()<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>{<br>        <span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-comment">// 查询所有</span><br>User.find()<br>.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>{<br>        <span class="hljs-built_in">console</span>.log(data)<br>    })<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>注册：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">User.findOne({<span class="hljs-attr">username</span>:<span class="hljs-string">'admin'</span>},<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">user</span>)</span>{<br>    <span class="hljs-keyword">if</span>(user){<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'用户已存在'</span>)<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">new</span> User({<br>             username:<span class="hljs-string">'aaa'</span>,<br>             password:<span class="hljs-string">'123'</span>,<br>             email:<span class="hljs-string">'fffff'</span><br>        }).save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript">User.findOne({<span class="hljs-attr">username</span>:<span class="hljs-string">'admin'</span>},<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">user</span>)</span>{<br>    <span class="hljs-keyword">if</span>(user){<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'用户已存在'</span>)<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">new</span> User({<br>             username:<span class="hljs-string">'aaa'</span>,<br>             password:<span class="hljs-string">'123'</span>,<br>             email:<span class="hljs-string">'fffff'</span><br>        }).save(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'注册成功'</span>);<br>        })<br>    }<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">User.findOne({<br>    username:<span class="hljs-string">'admin'</span><br>})<br>    .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">user</span>)</span>{<br>        <span class="hljs-keyword">if</span>(user){<br>            <span class="hljs-comment">// 用户已经存在不能注册</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'用户已存在'</span>);<br>        }<br>        <span class="hljs-keyword">else</span>{<br>            <span class="hljs-comment">// 用户不存在可以注册</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User({<br>                username:<span class="hljs-string">'aaa'</span>,<br>                password:<span class="hljs-string">'123'</span>,<br>                email:<span class="hljs-string">'fffff'</span><br>            }).save();<br>        }<br>    })<br>    .then(funciton(ret){<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript">User.findOne({<br>    username:<span class="hljs-string">'admin'</span><br>})<br>    .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">user</span>)</span>{<br>        <span class="hljs-keyword">if</span>(user){<br>            <span class="hljs-comment">// 用户已经存在不能注册</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'用户已存在'</span>);<br>        }<br>        <span class="hljs-keyword">else</span>{<br>            <span class="hljs-comment">// 用户不存在可以注册</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User({<br>                username:<span class="hljs-string">'aaa'</span>,<br>                password:<span class="hljs-string">'123'</span>,<br>                email:<span class="hljs-string">'fffff'</span><br>            }).save();<br>        }<br>    })<br>    .then(funciton(ret){<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'注册成功'</span>);<br>    })<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>async函数</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="修改完代码自动重启"><a href="#修改完代码自动重启" class="headerlink" title="修改完代码自动重启"></a>修改完代码自动重启</h2><p>我们在这里可以使用一个第三方命名行工具：<code>nodemon</code>来帮助我们解决频繁修改代码重启服务器的问题。</p><p><code>nodemon</code>是一个基于Node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">#在任意目录执行该命令都可以<br>#也就是说，所有需要 --global安装的包都可以在任意目录执行<br>npm install --global nodemon<br>npm install -g nodemon<br><br>#如果安装不成功的话，可以使用cnpm安装<br>cnpm install -g nodemon<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>安装完毕之后使用：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">node app.js<br><br>#使用nodemon<br>nodemon app.js<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>只要是通过<code>nodemon</code>启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。</p><h2 id="封装异步API"><a href="#封装异步API" class="headerlink" title="封装异步API"></a>封装异步API</h2><p>回调函数：获取异步操作的结果</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">callback</span>)</span>{<br>    <span class="hljs-comment">// var callback = funtion(data){ console.log(data); }</span><br>setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">var</span> data = <span class="hljs-string">'hello'</span>;<br>        callback(data);<br>    },<span class="hljs-number">1000</span>);<br>}<br><span class="hljs-comment">// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取</span><br>fn(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>{<br>    <span class="hljs-built_in"><code class="language-hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">callback</span>)</span>{<br>    <span class="hljs-comment">// var callback = funtion(data){ console.log(data); }</span><br>setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br>        <span class="hljs-keyword">var</span> data = <span class="hljs-string">'hello'</span>;<br>        callback(data);<br>    },<span class="hljs-number">1000</span>);<br>}<br><span class="hljs-comment">// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取</span><br>fn(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(data);<br>})<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="数组的遍历方法，都是对函数作为一种参数"><a href="#数组的遍历方法，都是对函数作为一种参数" class="headerlink" title="数组的遍历方法，都是对函数作为一种参数"></a>数组的遍历方法，都是对函数作为一种参数</h2><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200314094620191.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200314094620191"></p><h2 id="EcmaScript-6"><a href="#EcmaScript-6" class="headerlink" title="EcmaScript 6"></a>EcmaScript 6</h2><blockquote><p>参考文档：<a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">https://es6.ruanyifeng.com/</a></p></blockquote><h1 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><code class="language-hljs javascript">.<br>app.js项目的入口文件<br>controllers<br>models存储使用mongoose设计的数据模型<br>node_modules第三方包<br>package.json包描述文件<br>package-lock.json第三方包版本锁定文件（npm5之后才有）<br>public公共静态资源<br>routes<br>views存储视图目录<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="模板页"><a href="#模板页" class="headerlink" title="模板页"></a>模板页</h2><ul><li>子模板</li><li>模板继承</li></ul><h2 id="路由设计-1"><a href="#路由设计-1" class="headerlink" title="路由设计"></a>路由设计</h2><table><thead><tr><th>路由</th><th>方法</th><th>get参数</th><th>post参数</th><th>是否需要登录</th><th>备注</th></tr></thead><tbody><tr><td>/</td><td>get</td><td></td><td></td><td></td><td>渲染首页</td></tr><tr><td>/register(登录)</td><td>get</td><td></td><td></td><td></td><td>渲染注册页面</td></tr><tr><td>/register</td><td>post</td><td></td><td>email,nickname,password</td><td></td><td>处理注册请求</td></tr><tr><td>/login</td><td>get</td><td></td><td></td><td></td><td>渲染登陆界面</td></tr><tr><td>/login</td><td>post</td><td></td><td>email,password</td><td></td><td>处理登录请求</td></tr><tr><td>/loginout</td><td>get</td><td></td><td></td><td></td><td>处理退出请求</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h2><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ul><li>创建目录结构</li><li>整合静态也-模板页<ul><li>include</li><li>block</li><li>extend</li></ul></li><li>设计用户登陆，退出，注册的路由</li><li>用户注册<ul><li>先处理客户端页面的内容（表单控件的name，收集表单数据，发起请求）</li><li>服务端<ul><li>获取从客户端收到的数据</li><li>操作数据库<ul><li>如果有错，发送500告诉客户端服务器错了‘</li><li>其他的根据业务发送不同的响应数据</li></ul></li></ul></li></ul></li><li>登录</li><li>退出</li></ul><h1 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h1><h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/guide/using-middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/guide/using-middleware.html</a></p></blockquote><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200316202757617.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200316202757617"></p><p>中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</p><p>说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</p><p>把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);<br><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>);<br><br><span class="hljs-keyword">var</span> cookie = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./expressPtoject/cookie'</span>);<br><span class="hljs-keyword">var</span> query = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./expressPtoject/query'</span>);<br><span class="hljs-keyword">var</span> postBody = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./expressPtoject/post-body'</span>);<br><br><span class="hljs-keyword">var</span> server = http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br><span class="hljs-comment">// 解析请求地址中的get参数</span><br><span class="hljs-comment">// var obj = url.parse(req.url,true);</span><br><span class="hljs-comment">// req.query = obj.query;</span><br>query(req,res);<span class="hljs-comment">//中间件</span><br><br><span class="hljs-comment">// 解析请求地址中的post参数</span><br>req.body = {<br>foo:<span class="hljs-string">'bar'</span><br>}<br>});<br><br><span class="hljs-keyword">if</span>(req.url === <span class="hljs-string">'xxx'</span>){<br><span class="hljs-comment">// 处理请求</span><br>...<br>}<br><br>server.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);<br><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>);<br><br><span class="hljs-keyword">var</span> cookie = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./expressPtoject/cookie'</span>);<br><span class="hljs-keyword">var</span> query = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./expressPtoject/query'</span>);<br><span class="hljs-keyword">var</span> postBody = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./expressPtoject/post-body'</span>);<br><br><span class="hljs-keyword">var</span> server = http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br><span class="hljs-comment">// 解析请求地址中的get参数</span><br><span class="hljs-comment">// var obj = url.parse(req.url,true);</span><br><span class="hljs-comment">// req.query = obj.query;</span><br>query(req,res);<span class="hljs-comment">//中间件</span><br><br><span class="hljs-comment">// 解析请求地址中的post参数</span><br>req.body = {<br>foo:<span class="hljs-string">'bar'</span><br>}<br>});<br><br><span class="hljs-keyword">if</span>(req.url === <span class="hljs-string">'xxx'</span>){<br><span class="hljs-comment">// 处理请求</span><br>...<br>}<br><br>server.listen(<span class="hljs-number">3000</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'3000 runing...'</span>);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<br><span class="hljs-keyword">var</span> app = express();<br>app.get(<span class="hljs-string">'/abc'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>{<br><span class="hljs-comment">// 同一个请求的req和res是一样的，</span><br><span class="hljs-comment">// 可以前面存储下面调用</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'/abc'</span>);<br><span class="hljs-comment">// req.foo = 'bar';</span><br>req.body = {<br>name:<span class="hljs-string">'xiaoxiao'</span>,<br>age:<span class="hljs-number">18</span><br>}<br>next();<br>});<br>app.get(<span class="hljs-string">'/abc'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>{<br><span class="hljs-comment">// console.log(req.foo);</span><br><span class="hljs-built_in">console</span>.log(req.body);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'/abc'</span>);<br>});<br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<br><span class="hljs-keyword">var</span> app = express();<br>app.get(<span class="hljs-string">'/abc'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>{<br><span class="hljs-comment">// 同一个请求的req和res是一样的，</span><br><span class="hljs-comment">// 可以前面存储下面调用</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'/abc'</span>);<br><span class="hljs-comment">// req.foo = 'bar';</span><br>req.body = {<br>name:<span class="hljs-string">'xiaoxiao'</span>,<br>age:<span class="hljs-number">18</span><br>}<br>next();<br>});<br>app.get(<span class="hljs-string">'/abc'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>{<br><span class="hljs-comment">// console.log(req.foo);</span><br><span class="hljs-built_in">console</span>.log(req.body);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'/abc'</span>);<br>});<br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'app is running at port 3000.'</span>);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200317110520098.png" srcset="/blog/img/loading.gif" lazyload="" alt="image-20200317110520098"></p><h2 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类:"></a>中间件的分类:</h2><h3 id="应用程序级别的中间件"><a href="#应用程序级别的中间件" class="headerlink" title="应用程序级别的中间件"></a>应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法的中间件）：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Time'</span>,<span class="hljs-built_in"><code class="language-hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Time'</span>,<span class="hljs-built_in">Date</span>.now());<br>    next();<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>关心请求路径和请求方法的中间件：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.use(<span class="hljs-string">'/a'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Time'</span>,<span class="hljs-built_in"><code class="language-hljs javascript">app.use(<span class="hljs-string">'/a'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>{<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Time'</span>,<span class="hljs-built_in">Date</span>.now());<br>    next();<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h3><p>严格匹配请求路径和请求方法的中间件</p><p>get:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>res.send(<span class="hljs-string"><code class="language-hljs javascript">app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>res.send(<span class="hljs-string">'get'</span>);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>post：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.post(<span class="hljs-string">'/a'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>res.send(<span class="hljs-string"><code class="language-hljs javascript">app.post(<span class="hljs-string">'/a'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>res.send(<span class="hljs-string">'post'</span>);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>put:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.put(<span class="hljs-string">'/user'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>res.send(<span class="hljs-string"><code class="language-hljs javascript">app.put(<span class="hljs-string">'/user'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>res.send(<span class="hljs-string">'put'</span>);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>delete:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.delete(<span class="hljs-string">'/delete'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>res.send(<span class="hljs-string"><code class="language-hljs javascript">app.delete(<span class="hljs-string">'/delete'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>res.send(<span class="hljs-string">'delete'</span>);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h3 id="总"><a href="#总" class="headerlink" title="总"></a>总</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">// 中间件：处理请求，本质就是个函数</span><br><span class="hljs-comment">// 在express中，对中间件有几种分类</span><br><br><span class="hljs-comment">// 1 不关心任何请求路径和请求方法的中间件</span><br><span class="hljs-comment">// 也就是说任何请求都会进入这个中间件</span><br><span class="hljs-comment">// 中间件本身是一个方法，该方法接收三个参数</span><br><span class="hljs-comment">// Request 请求对象</span><br><span class="hljs-comment">// Response 响应对象</span><br><span class="hljs-comment">// next 下一个中间件</span><br><span class="hljs-comment">// // 全局匹配中间件</span><br><span class="hljs-comment">// app.use(function(req, res, next) {</span><br><span class="hljs-comment">// console.log('1');</span><br><span class="hljs-comment">// // 当一个请求进入中间件后</span><br><span class="hljs-comment">// // 如果需要请求另外一个方法则需要使用next（）方法</span><br><span class="hljs-comment">// next();</span><br><span class="hljs-comment">// // next是一个方法，用来调用下一个中间件</span><br><span class="hljs-comment">//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）</span><br><span class="hljs-comment">// });</span><br><span class="hljs-comment">// app.use(function(req, res, next) {</span><br><span class="hljs-comment">// console.log('2');</span><br><span class="hljs-comment">// });</span><br><br><span class="hljs-comment">// // 2 关心请求路径的中间件</span><br><span class="hljs-comment">// // 以/xxx开头的中间件</span><br><span class="hljs-comment">// app.use('/a',function(req, res, next) {</span><br><span class="hljs-comment">// console.log(req.url);</span><br><span class="hljs-comment">// });</span><br><br><span class="hljs-comment">// 3 严格匹配请求方法和请求路径的中间件</span><br>app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'/'</span>);<br>});<br>app.post(<span class="hljs-string">'/a'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'/a'</span>);<br>});<br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>);<br><span class="hljs-keyword">var</span> app = express();<br><br><span class="hljs-comment">// 中间件：处理请求，本质就是个函数</span><br><span class="hljs-comment">// 在express中，对中间件有几种分类</span><br><br><span class="hljs-comment">// 1 不关心任何请求路径和请求方法的中间件</span><br><span class="hljs-comment">// 也就是说任何请求都会进入这个中间件</span><br><span class="hljs-comment">// 中间件本身是一个方法，该方法接收三个参数</span><br><span class="hljs-comment">// Request 请求对象</span><br><span class="hljs-comment">// Response 响应对象</span><br><span class="hljs-comment">// next 下一个中间件</span><br><span class="hljs-comment">// // 全局匹配中间件</span><br><span class="hljs-comment">// app.use(function(req, res, next) {</span><br><span class="hljs-comment">// console.log('1');</span><br><span class="hljs-comment">// // 当一个请求进入中间件后</span><br><span class="hljs-comment">// // 如果需要请求另外一个方法则需要使用next（）方法</span><br><span class="hljs-comment">// next();</span><br><span class="hljs-comment">// // next是一个方法，用来调用下一个中间件</span><br><span class="hljs-comment">//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）</span><br><span class="hljs-comment">// });</span><br><span class="hljs-comment">// app.use(function(req, res, next) {</span><br><span class="hljs-comment">// console.log('2');</span><br><span class="hljs-comment">// });</span><br><br><span class="hljs-comment">// // 2 关心请求路径的中间件</span><br><span class="hljs-comment">// // 以/xxx开头的中间件</span><br><span class="hljs-comment">// app.use('/a',function(req, res, next) {</span><br><span class="hljs-comment">// console.log(req.url);</span><br><span class="hljs-comment">// });</span><br><br><span class="hljs-comment">// 3 严格匹配请求方法和请求路径的中间件</span><br>app.get(<span class="hljs-string">'/'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'/'</span>);<br>});<br>app.post(<span class="hljs-string">'/a'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'/a'</span>);<br>});<br><br>app.listen(<span class="hljs-number">3000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'app is running at port 3000.'</span>);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)</span>{<br>    <span class="hljs-built_in">console</span>.error(err,stack);<br>    res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string"><code class="language-hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)</span>{<br>    <span class="hljs-built_in">console</span>.error(err,stack);<br>    res.status(<span class="hljs-number">500</span>).send(<span class="hljs-string">'Something broke'</span>);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>配置使用404中间件：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    res.render(<span class="hljs-string"><code class="language-hljs javascript">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>{<br>    res.render(<span class="hljs-string">'404.html'</span>);<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>配置全局错误处理中间件:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript">app.get(<span class="hljs-string">'/a'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>{<br>fs.readFile(<span class="hljs-string">'.a/bc'</span>, funtion() {<br><span class="hljs-keyword">if</span> (err) {<br>        <span class="hljs-comment">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span><br>        <span class="hljs-comment">// 当发生全局错误的时候，我们可以调用next传递错误对象</span><br>        <span class="hljs-comment">// 然后被全局错误处理中间件匹配到并进行处理</span><br>next(err);<br>}<br>})<br>});<br><span class="hljs-comment">//全局错误处理中间件</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)</span>{<br>    res.status(<span class="hljs-number">500</span>).json({<br>        err_code:<span class="hljs-number"><code class="language-hljs javascript">app.get(<span class="hljs-string">'/a'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>{<br>fs.readFile(<span class="hljs-string">'.a/bc'</span>, funtion() {<br><span class="hljs-keyword">if</span> (err) {<br>        <span class="hljs-comment">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span><br>        <span class="hljs-comment">// 当发生全局错误的时候，我们可以调用next传递错误对象</span><br>        <span class="hljs-comment">// 然后被全局错误处理中间件匹配到并进行处理</span><br>next(err);<br>}<br>})<br>});<br><span class="hljs-comment">//全局错误处理中间件</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,req,res,next</span>)</span>{<br>    res.status(<span class="hljs-number">500</span>).json({<br>        err_code:<span class="hljs-number">500</span>,<br>        message:err.message<br>    });<br>});<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h2><ul><li>express.static(提供静态文件)<ul><li><a href="http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express" target="_blank" rel="noopener">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a></li></ul></li></ul><h2 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/resources/middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/resources/middleware.html</a></p></blockquote><ul><li>body-parser</li><li>compression</li><li>cookie-parser</li><li>mogran</li><li>response-time</li><li>server-static</li><li>session</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>内部类</title>
    <link href="/blog/2020/02/18/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <url>/blog/2020/02/18/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>把一个类放在另一个类的内部定义，称为内部类</p><p>内部类可以使用public、default、protected 、private以及static修饰。而外部顶级类只能使用public和default修饰。</p><p>内部类是相对独立的一种存在，其成员变量/方法名可以和外部类的相同。</p><p>==内部类分为成员内部类(非静态内部类、静态内部类)、匿名内部类、局部内部类。==</p><p>内部类的作用：</p><pre><code class="hljs">1. 内部类提供了更好的封装。只能让外部类直接访问，不允许同一个包中的其他类直接访问。2. 内部类可以直接访问外部类的私有属性，内部类被当成其外部类的成员。 但外部类不能访问内部类的内部属性。3. 接口只是解决了多重继承的部分问题，而内部类使得多重继承的解决方案变得更加完整。</code></pre><p>内部类的使用场合：</p><pre><code class="hljs">1. 由于内部类提供了更好的封装特性，并且可以很方便的访问外部类的属性。所以，在只为外部类提供服务的情况下可以优先考虑使用内部类。2.  使用内部类间接实现多继承：每个内部类都能独立地继承一个类或者实现某些接口，所以无论外部类是否已经继承了某个类或者实现了某些接口，对于内部类没有任何影响。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>多态(polymorphism)</title>
    <link href="/blog/2020/02/18/%E5%A4%9A%E6%80%81(polymorphism)/"/>
    <url>/blog/2020/02/18/%E5%A4%9A%E6%80%81(polymorphism)/</url>
    
    <content type="html"><![CDATA[<p>==多态指的是同一个方法调用，由于对象不同可能会有不同的行为==</p><p>现实生活中，同一个方法，具体实现会完全不同。 比如：同样是调用人的“休息”方法，张三是睡觉，李四是旅游，高淇老师是敲代码，数学教授是做数学题; 同样是调用人“吃饭”的方法，中国人用筷子吃饭，英国人用刀叉吃饭，印度人用手吃饭。</p><pre><code class="hljs">多态的要点：1. 多态是方法的多态，不是属性的多态(多态与属性无关)。2. 多态的存在要有3个必要条件：继承，方法重写，父类引用指向子类对象。3. 父类引用指向子类对象后，用该父类引用调用子类重写的方法，此时多态就出现了。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>方法的重写和重载</title>
    <link href="/blog/2020/02/18/%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD/"/>
    <url>/blog/2020/02/18/%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>==一、方法重写(0veriding)==</p><p>子类可以定义新的特征，当子类需要修改父类的一些方法进行扩展，增大功能，这样的一种操作方法称为重写</p><p>子类既可以隐藏和访问父类的方法，也可以覆盖继承父类的方法。覆盖继承父类的方法就是通过方法的重写来实现的。</p><p>所谓==方法的重写是指子类中的方法与父类中继承的方法有完全相同的返回值类型、方法名、参数个数以及参数类型。==</p><p>如果子类将父类中的方法重写了，调用的时候肯定是调用被重写过的方法，如果现在一定要调用父类中的方法，通过使用super关键就可以实现这个功能，super关键字可以从子类访问父类中的内容，如果要访问被重写过的方法，使用“super.方法名(参数列表)”的形式调用。</p><p>==二、重写规则==<br>在重写方法时，需要遵循以下的规则：<br>(一) ==父类方法的参数列表必须完全与被子类重写的方法的参数列表相同，否则不能称其为重写而是重载。==<br>(二)==父类的返回类型必须与被子类重写的方法返回类型相同，否则不能称其为重写而是重载==<br>(三) Java中规定，被子类重写的方法不能拥有比父类方法更加严格的访问权限。如果定义父类的方法为public，在子类定义为private，程序运行时就会报错。</p><p>父类中的方法并不是在任何情况下都可以重写的，==当父类中方法的访问权限修饰符为private时，该方法只能被自己的类访问，不能被外部的类访问，在子类是不能被重写的==   </p><p>(四)==在继承过程中如果父类当中的方法抛出异常，那么在子类中重写父类的该方法时，也要抛出异常==</p><p>而且抛出的异常不能多于父类中抛出的异常(可以等于父类中抛出的异常)。换句话说，==重写方法一定不能抛出新的检查异常==</p><p>==三、方法重载(Overloading)==</p><p>==方法重载是让类以统一的方式处理不同类型数据的一种手段。调用方法时通过传递给它们的不同个数和类型的参数来决定具体使用哪个方法，这就是多态性。==</p><p>==方法重载是指在一个类中，多个方法的方法名相同，但是参数列表不同。参数列表不同指的是参数个数、参数类型或者参数的顺序不同。==</p><p>构造方法也可以重载。</p><p>==重载是指我们可以定义一些名称相同的方法，通过定义不同的参数来区分这些方法，然后再调用时，Java虚拟机就会根据不同的参数列表来选择合适的方法执行。也就是说，当一个重载方法被调用时，Java用参数的类型或个数来决定实际调用的重载方法。因此，每个重载方法的参数的类型或个数必须是不同。==</p><p>重载要注意以下的几点:<br>1.在使用重载时只能通过不同的参数列表，必须具有不同的参数列表。<br>2.不能通过访问权限、返回类型、抛出的异常进行重载。<br>3.方法的异常类型和数目不会对重载造成影响。<br>4.可以有不同的返回类型，只要参数列表不同就可以了。<br>5.可以有不同的访问修饰符。<br>6.可以抛出不同的异常。</p><p>==四、方法重写与方法重载的区别==<br><img src="https://img-blog.csdnimg.cn/20200218103848739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUxMjI4MQ==,size_16,color_FFFFFF,t_70" srcset="/blog/img/loading.gif" lazyload="" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>封装的实现—使用访问控制符</title>
    <link href="/blog/2020/02/17/%E5%B0%81%E8%A3%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E2%80%94%E4%BD%BF%E7%94%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%AC%A6/"/>
    <url>/blog/2020/02/17/%E5%B0%81%E8%A3%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E2%80%94%E4%BD%BF%E7%94%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>  Java中的修饰符可修饰类、属性、方法<br>      ==类==的属性的处理:</p><pre><code class="hljs">1. 一般使用private访问权限。2.  提供相应的get/set方法来访问相关属性，这些方法通常是public修饰的，以提供对属性的赋值与读取操作(注意：boolean变量的get方法是is开头!)。3. 一些只用于本类的辅助性方法可以用private修饰，希望其他类调用的方法用public修饰。</code></pre><p>  Java是使用“访问控制符”来控制哪些细节需要封装，哪些细节需要暴露的。 Java中4种“访问控制符”分别为private、default、protected、public，它们说明了面向对象的封装性，所以我们要利用它们尽可能的让访问权限降到最低，从而提高安全性。<br>  <img src="https://img-blog.csdnimg.cn/20200217092002314.png" srcset="/blog/img/loading.gif" lazyload="" alt="在这里插入图片描述"></p><ol><li><p>private 表示私有，只有自己类能访问</p></li><li><p>default 表示没有修饰符修饰，只有同一个包的类能访问</p></li><li><p>protected 表示可以被同一个包的类以及其他包中的子类访问</p></li><li><p>public 表示可以被该项目的所有包中的所有类访问</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>== 和 equals 的区别</title>
    <link href="/blog/2020/02/17/==%20%E5%92%8C%20equals%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/blog/2020/02/17/==%20%E5%92%8C%20equals%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>equals和==的区别:</p><ol><li>= =号在比较基本数据类型时比较的是值，而用= =号==比较两个对象时比较的是两个对象的地址值==</li><li>equals()方法存在于Object类中，因为Object类是所有类的直接或间接父类，也就是说所有的类中的equals()方法都继承自Object类，而通过源码我们发现，Object类中equals()方法底层依赖的是= =号，那么，在所有没有重写equals()方法的类中，调用equals()方法其实和使用= =号的效果一样，也是比较的地址值，然而，Java提供的所有类中，绝大多数类都重写了equals()方法，==重写后的equals()方法一般都是比较两个对象的值==</li></ol><p>JVM在内存中的分配<br>        在JVM中，内存分为堆内存(堆内存中有方法区：方法区存储类信息)跟栈内存。他们二者的区别是： 当我们创建一个对象（new Object）时，就会调用对象的构造函数来开辟空间，将对象数据存储到堆内存中，与此同时在栈内存中生成对应的引用，当我们在后续代码中调用的时候用的都是栈内存中的引用。还需注意的一点，基本数据类型是存储在栈内存中。</p><p>==认识equals与= =的区别：==<br> ==是判断两个变量或实例是不是指向同一个内存空间，equals是判断两个变量或实例所指向的内存空间的值是不是相同<br>==是指对内存地址进行比较 ， equals()是对字符串的内容进行比较<br>==指引用是否相同， equals()指的是值是否相同<br> 用一张图可以简要的表现他们之间的关系：<br><img src="https://img-blog.csdnimg.cn/20200217080209156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUxMjI4MQ==,size_16,color_FFFFFF,t_70" srcset="/blog/img/loading.gif" lazyload="" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>上传命令</title>
    <link href="/blog/2020/02/09/%E4%B8%8A%E4%BC%A0%E5%91%BD%E4%BB%A4/"/>
    <url>/blog/2020/02/09/%E4%B8%8A%E4%BC%A0%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>title：上传文章</p><h1 id="上传文章的步骤"><a href="#上传文章的步骤" class="headerlink" title="上传文章的步骤"></a>上传文章的步骤</h1><ol><li>将.md文件放入D:\blog\source_posts文件夹中</li><li>在任意位置鼠标点击右键，选择Git Bash Here</li><li>在弹出的界面上输入如下内容：<ul><li>启动hexo:输入hexo g</li><li>启动服务器：输入hexo s ，按ctrl+c退出本地运行</li><li>发表文章：输入hexo d<br><img src="https://img-blog.csdnimg.cn/20200209203942672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTUxMjI4MQ==,size_16,color_FFFFFF,t_70" srcset="/blog/img/loading.gif" lazyload="" alt="在这里插入图片描述"></li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSDN使用指南</title>
    <link href="/blog/2020/02/09/CSDN%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/blog/2020/02/09/CSDN%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>title:this is my first blog<br>快捷键</p><hr><p>撤销：Ctrl/Command + Z<br>重做：Ctrl/Command + Y<br>加粗：Ctrl/Command + B<br>斜体：Ctrl/Command + I<br>标题：Ctrl/Command + Shift + H<br>无序列表：Ctrl/Command + Shift + U<br>有序列表：Ctrl/Command + Shift + O<br>检查列表：Ctrl/Command + Shift + C<br>插入代码：Ctrl/Command + Shift + K<br>插入链接：Ctrl/Command + Shift + L<br>插入图片：Ctrl/Command + Shift + G<br>查找：Command + F<br>替换：Command + G</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="1级标题"><a href="#1级标题" class="headerlink" title="1级标题"></a>1级标题</h1><h2 id="2级标题"><a href="#2级标题" class="headerlink" title="2级标题"></a>2级标题</h2><h3 id="3级标题"><a href="#3级标题" class="headerlink" title="3级标题"></a>3级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong><br><strong>加粗哈</strong><br>==标记文本==<br>==标记哈==<br><del>删除文本</del><br><del>删除哈</del></p><blockquote><p>引用文本</p></blockquote><p>H<del>2</del>O is是液体。</p><p>2^10^ 运算结果是 1024。</p><blockquote><p>引用哈</p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接: <a href="https://www.csdn.net/" target="_blank" rel="noopener">link</a>.</p><p>图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" srcset="/blog/img/loading.gif" lazyload="" alt="Alt"></p><p>带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" target="_blank" rel="noopener">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =30x30)</p><p>居中的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" srcset="/blog/img/loading.gif" lazyload="" alt="Alt"></p><p>居中并且带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" target="_blank" rel="noopener">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p><h2 id="代码片"><a href="#代码片" class="headerlink" title="代码片"></a>代码片</h2><p>下面展示一些 <code>内联代码片</code>。</p><figure class="highlight delphi"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs delphi"><span class="hljs-comment">// A code block</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-string"><code class="language-hljs delphi"><span class="hljs-comment">// A code block</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-string">'bar'</span>;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs javascript"><span class="hljs-comment">// An highlighted block</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-string"><code class="language-hljs javascript"><span class="hljs-comment">// An highlighted block</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-string">'bar'</span>;<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><table><thead><tr><th align="center">Column 1</th><th align="right">Column 2</th></tr></thead><tbody><tr><td align="center">centered 文本居中</td><td align="right">right-aligned 文本居右</td></tr></tbody></table><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>Authors<br>:  John</dt><dd>Luke</dd></dl><h2 id="注脚"><a href="#注脚" class="headerlink" title="注脚"></a>注脚</h2><p>一个具有注脚的文本。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="注脚的解释">[1]</span></a></sup></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Markdown将文本转换为 HTML。</p><p>*[HTML]:   超文本标记语言</p><h2 id="LaTeX-数学公式"><a href="#LaTeX-数学公式" class="headerlink" title="LaTeX 数学公式"></a>LaTeX 数学公式</h2><p><a href="https://khan.github.io/KaTeX/" target="_blank" rel="noopener">参考文档</a></p><p>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过 Euler integral</p><p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p><h2 id="插入甘特图"><a href="#插入甘特图" class="headerlink" title="插入甘特图"></a>插入甘特图</h2><p><a href="https://mermaidjs.github.io/#/gantt" target="_blank" rel="noopener">参考文档</a></p><pre class="line-numbers language- mermaid"><code class="language- mermaid">gantt        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section 现有任务        已完成               :done,    des1, 2014-01-06,2014-01-08        进行中               :active,  des2, 2014-01-09, 3d        计划中               :         des3, after des2, 5d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="插入UML图"><a href="#插入UML图" class="headerlink" title="插入UML图"></a>插入UML图</h2><p><a href="https://mermaidjs.github.io/#/sequenceDiagram" target="_blank" rel="noopener">参考文档</a></p><pre class="line-numbers language- mermaid"><code class="language- mermaid">sequenceDiagram张三 ->> 李四: 你好！李四, 最近怎么样?李四-->>王五: 你最近怎么样，王五？李四--x 张三: 我很好，谢谢!李四-x 王五: 我很好，谢谢!Note right of 王五: 李四想了很长时间, 文字太长了<br/>不适合放在一行.李四-->>张三: 打量着王五...张三->>王五: 很好... 王五, 你怎么样?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="插入Mermaid流程图"><a href="#插入Mermaid流程图" class="headerlink" title="插入Mermaid流程图"></a>插入Mermaid流程图</h2><p><a href="https://mermaidjs.github.io/#/flowchart?id=graph" target="_blank" rel="noopener">参考文档</a></p><pre class="line-numbers language- mermaid"><code class="language- mermaid">graph LRA[长方形] -- 链接 --> B((圆))A --> C(圆角长方形)B --> D{菱形}C --> D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="插入Flowchart流程图"><a href="#插入Flowchart流程图" class="headerlink" title="插入Flowchart流程图"></a>插入Flowchart流程图</h2><p><a href="http://flowchart.js.org/" target="_blank" rel="noopener">参考文档</a></p><pre class="line-numbers language- mermaid"><code class="language- mermaid">flowchatst=>start: 开始e=>end: 结束op=>operation: 我的操作cond=>condition: 确认？st->op->condcond(yes)->econd(no)->op<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>注脚的解释<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="/blog/2020/02/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/blog/2020/02/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>  写入门系列<br>     备忘录<br>     笔记<br>     基础理解<br>     踩坑记录</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hello,Hexo</title>
    <link href="/blog/2020/02/04/hello-Hexo/"/>
    <url>/blog/2020/02/04/hello-Hexo/</url>
    
    <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2020/02/04/hello-world/"/>
    <url>/blog/2020/02/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs bash">$ hexo new <span class="hljs-string"><code class="language-hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs bash"><code class="language-hljs bash">$ hexo server<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs bash"><code class="language-hljs bash">$ hexo generate<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class="line-numbers language-hljs bash"><code class="language-hljs bash">$ hexo deploy<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
